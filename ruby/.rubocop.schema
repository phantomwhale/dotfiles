{
  "title": "JSON schema for RuboCop configuration files",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "type": "object",
  "properties": {
    "require": {
      "$ref": "#/definitions/stringOrStrings"
    },
    "inherit_from": {
      "$ref": "#/definitions/stringOrStrings"
    },
    "inherit_gem": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/stringOrStrings"
      }
    },
    "inherit_mode": {
      "$ref": "#/definitions/inheritMode"
    },
    "AllCops": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/sharedProperties"
        },
        {
          "$ref": "#/definitions/allCopsProperties"
        }
      ]
    },
    "Migration": {
      "$ref": "#/definitions/copProperties"
    },
    "Bundler": {
      "$ref": "#/definitions/copProperties"
    },
    "Gemspec": {
      "$ref": "#/definitions/copProperties"
    },
    "Layout": {
      "$ref": "#/definitions/copProperties"
    },
    "Lint": {
      "$ref": "#/definitions/copProperties"
    },
    "Metrics": {
      "$ref": "#/definitions/copProperties"
    },
    "Naming": {
      "$ref": "#/definitions/copProperties"
    },
    "Style": {
      "$ref": "#/definitions/copProperties"
    },
    "Security": {
      "$ref": "#/definitions/copProperties"
    },
    "Buildkite": {
      "$ref": "#/definitions/copProperties"
    },
    "Migration/DepartmentName": {
      "title": "Migration/DepartmentName",
      "description": "Check that cop names in rubocop:disable (etc) comments are given with department name.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Bundler/DuplicatedGem": {
      "title": "Bundler/DuplicatedGem",
      "description": "Checks for duplicate gem entries in Gemfile.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "Severity": {
              "type": "string",
              "default": "warning"
            },
            "Include": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "**/*.gemfile",
                "**/Gemfile",
                "**/gems.rb"
              ]
            }
          }
        }
      ]
    },
    "Bundler/DuplicatedGroup": {
      "title": "Bundler/DuplicatedGroup",
      "description": "Checks for duplicate group entries in Gemfile.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "Severity": {
              "type": "string",
              "default": "warning"
            },
            "Include": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "**/*.gemfile",
                "**/Gemfile",
                "**/gems.rb"
              ]
            }
          }
        }
      ]
    },
    "Bundler/GemComment": {
      "title": "Bundler/GemComment",
      "description": "Add a comment describing each gem.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": false
            },
            "Include": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "**/*.gemfile",
                "**/Gemfile",
                "**/gems.rb"
              ]
            },
            "IgnoredGems": {
              "type": "array",
              "items": {},
              "default": []
            },
            "OnlyFor": {
              "type": "array",
              "items": {},
              "default": []
            }
          }
        }
      ]
    },
    "Bundler/GemFilename": {
      "title": "Bundler/GemFilename",
      "description": "Enforces the filename for managing gems.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Gemfile",
                    "gems.rb"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "Gemfile",
                      "gems.rb"
                    ]
                  }
                }
              ],
              "default": "Gemfile"
            },
            "Include": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "**/Gemfile",
                "**/gems.rb",
                "**/Gemfile.lock",
                "**/gems.locked"
              ]
            }
          }
        }
      ]
    },
    "Bundler/GemVersion": {
      "title": "Bundler/GemVersion",
      "description": "Requires or forbids specifying gem versions.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": false
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "required",
                    "forbidden"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "required",
                      "forbidden"
                    ]
                  }
                }
              ],
              "default": "required"
            },
            "Include": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "**/*.gemfile",
                "**/Gemfile",
                "**/gems.rb"
              ]
            },
            "AllowedGems": {
              "type": "array",
              "items": {},
              "default": []
            }
          }
        }
      ]
    },
    "Bundler/InsecureProtocolSource": {
      "title": "Bundler/InsecureProtocolSource",
      "description": "The source `:gemcutter`, `:rubygems` and `:rubyforge` are deprecated because HTTP requests are insecure. Please change your source to 'https://rubygems.org' if possible, or 'http://rubygems.org' if not.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "Severity": {
              "type": "string",
              "default": "warning"
            },
            "AllowHttpProtocol": {
              "type": "boolean",
              "default": true
            },
            "Include": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "**/*.gemfile",
                "**/Gemfile",
                "**/gems.rb"
              ]
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Bundler/OrderedGems": {
      "title": "Bundler/OrderedGems",
      "description": "Gems within groups in the Gemfile should be alphabetically sorted.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "TreatCommentsAsGroupSeparators": {
              "type": "boolean",
              "default": true
            },
            "ConsiderPunctuation": {
              "type": "boolean",
              "default": false
            },
            "Include": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "**/*.gemfile",
                "**/Gemfile",
                "**/gems.rb"
              ]
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Gemspec/AddRuntimeDependency": {
      "title": "Gemspec/AddRuntimeDependency",
      "description": "Prefer `add_dependency` over `add_runtime_dependency`.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "References": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "https://github.com/rubygems/rubygems/issues/7799#issuecomment-2192720316"
              ]
            },
            "Enabled": {
              "default": "pending"
            },
            "Include": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "**/*.gemspec"
              ]
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Gemspec/DependencyVersion": {
      "title": "Gemspec/DependencyVersion",
      "description": "Requires or forbids specifying gem dependency versions.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": false
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "required",
                    "forbidden"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "required",
                      "forbidden"
                    ]
                  }
                }
              ],
              "default": "required"
            },
            "Include": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "**/*.gemspec"
              ]
            },
            "AllowedGems": {
              "type": "array",
              "items": {},
              "default": []
            }
          }
        }
      ]
    },
    "Gemspec/DeprecatedAttributeAssignment": {
      "title": "Gemspec/DeprecatedAttributeAssignment",
      "description": "Checks that deprecated attribute assignments are not set in a gemspec file.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "Severity": {
              "type": "string",
              "default": "warning"
            },
            "Include": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "**/*.gemspec"
              ]
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Gemspec/DevelopmentDependencies": {
      "title": "Gemspec/DevelopmentDependencies",
      "description": "Checks that development dependencies are specified in Gemfile rather than gemspec.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "Gemfile",
                    "gems.rb",
                    "gemspec"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "Gemfile",
                      "gems.rb",
                      "gemspec"
                    ]
                  }
                }
              ],
              "default": "Gemfile"
            },
            "AllowedGems": {
              "type": "array",
              "items": {},
              "default": []
            },
            "Include": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "**/*.gemspec",
                "**/Gemfile",
                "**/gems.rb"
              ]
            }
          }
        }
      ]
    },
    "Gemspec/DuplicatedAssignment": {
      "title": "Gemspec/DuplicatedAssignment",
      "description": "An attribute assignment method calls should be listed only once in a gemspec.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "Severity": {
              "type": "string",
              "default": "warning"
            },
            "Include": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "**/*.gemspec"
              ]
            }
          }
        }
      ]
    },
    "Gemspec/OrderedDependencies": {
      "title": "Gemspec/OrderedDependencies",
      "description": "Dependencies in the gemspec should be alphabetically sorted.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "TreatCommentsAsGroupSeparators": {
              "type": "boolean",
              "default": true
            },
            "ConsiderPunctuation": {
              "type": "boolean",
              "default": false
            },
            "Include": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "**/*.gemspec"
              ]
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Gemspec/RequireMFA": {
      "title": "Gemspec/RequireMFA",
      "description": "Checks that the gemspec has metadata to require Multi-Factor Authentication from RubyGems.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "Severity": {
              "type": "string",
              "default": "warning"
            },
            "References": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "https://guides.rubygems.org/mfa-requirement-opt-in/"
              ]
            },
            "Include": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "**/*.gemspec"
              ]
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Gemspec/RequiredRubyVersion": {
      "title": "Gemspec/RequiredRubyVersion",
      "description": "Checks that `required_ruby_version` of gemspec is specified and equal to `TargetRubyVersion` of .rubocop.yml.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "Severity": {
              "type": "string",
              "default": "warning"
            },
            "Include": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "**/*.gemspec"
              ]
            }
          }
        }
      ]
    },
    "Gemspec/RubyVersionGlobalsUsage": {
      "title": "Gemspec/RubyVersionGlobalsUsage",
      "description": "Checks usage of RUBY_VERSION in gemspec.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "Severity": {
              "type": "string",
              "default": "warning"
            },
            "Include": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "**/*.gemspec"
              ]
            }
          }
        }
      ]
    },
    "Layout/AccessModifierIndentation": {
      "title": "Layout/AccessModifierIndentation",
      "description": "Check indentation of private/protected visibility modifiers.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "outdent",
                    "indent"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "outdent",
                      "indent"
                    ]
                  }
                }
              ],
              "default": "indent"
            },
            "IndentationWidth": {
              "type": "integer"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/ArgumentAlignment": {
      "title": "Layout/ArgumentAlignment",
      "description": "Align the arguments of a method call if they span more than one line.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "with_first_argument",
                    "with_fixed_indentation"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "with_first_argument",
                      "with_fixed_indentation"
                    ]
                  }
                }
              ],
              "default": "with_first_argument"
            },
            "IndentationWidth": {
              "type": "integer"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/ArrayAlignment": {
      "title": "Layout/ArrayAlignment",
      "description": "Align the elements of an array literal if they span more than one line.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "with_first_element",
                    "with_fixed_indentation"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "with_first_element",
                      "with_fixed_indentation"
                    ]
                  }
                }
              ],
              "default": "with_first_element"
            },
            "IndentationWidth": {
              "type": "integer"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/AssignmentIndentation": {
      "title": "Layout/AssignmentIndentation",
      "description": "Checks the indentation of the first line of the right-hand-side of a multi-line assignment.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "IndentationWidth": {
              "type": "integer"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/BeginEndAlignment": {
      "title": "Layout/BeginEndAlignment",
      "description": "Align ends corresponding to begins correctly.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyleAlignWith": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "start_of_line",
                    "begin"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "start_of_line",
                      "begin"
                    ]
                  }
                }
              ],
              "default": "start_of_line"
            },
            "Severity": {
              "type": "string",
              "default": "warning"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/BlockAlignment": {
      "title": "Layout/BlockAlignment",
      "description": "Align block ends correctly.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyleAlignWith": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "either",
                    "start_of_block",
                    "start_of_line"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "either",
                      "start_of_block",
                      "start_of_line"
                    ]
                  }
                }
              ],
              "default": "either"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/BlockEndNewline": {
      "title": "Layout/BlockEndNewline",
      "description": "Put end statement of multiline block on its own line.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/CaseIndentation": {
      "title": "Layout/CaseIndentation",
      "description": "Indentation of when in a case/(when|in)/[else/]end.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "case",
                    "end"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "case",
                      "end"
                    ]
                  }
                }
              ],
              "default": "case"
            },
            "IndentOneStep": {
              "type": "boolean",
              "default": false
            },
            "IndentationWidth": {
              "type": "integer"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/ClassStructure": {
      "title": "Layout/ClassStructure",
      "description": "Enforces a configured order of definitions within a class body.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": false
            },
            "Categories": {
              "type": "object",
              "default": {
                "module_inclusion": [
                  "include",
                  "prepend",
                  "extend"
                ]
              }
            },
            "ExpectedOrder": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "module_inclusion",
                "constants",
                "public_class_methods",
                "initializer",
                "public_methods",
                "protected_methods",
                "private_methods"
              ]
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/ClosingHeredocIndentation": {
      "title": "Layout/ClosingHeredocIndentation",
      "description": "Checks the indentation of here document closings.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/ClosingParenthesisIndentation": {
      "title": "Layout/ClosingParenthesisIndentation",
      "description": "Checks the indentation of hanging closing parentheses.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/CommentIndentation": {
      "title": "Layout/CommentIndentation",
      "description": "Indentation of comments.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AllowForAlignment": {
              "type": "boolean",
              "default": false
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/ConditionPosition": {
      "title": "Layout/ConditionPosition",
      "description": "Checks for condition placed in a confusing position relative to the keyword.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/DefEndAlignment": {
      "title": "Layout/DefEndAlignment",
      "description": "Align ends corresponding to defs correctly.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyleAlignWith": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "start_of_line",
                    "def"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "start_of_line",
                      "def"
                    ]
                  }
                }
              ],
              "default": "start_of_line"
            },
            "Severity": {
              "type": "string",
              "default": "warning"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/DotPosition": {
      "title": "Layout/DotPosition",
      "description": "Checks the position of the dot in multi-line method calls.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "leading",
                    "trailing"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "leading",
                      "trailing"
                    ]
                  }
                }
              ],
              "default": "leading"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/ElseAlignment": {
      "title": "Layout/ElseAlignment",
      "description": "Align elses and elsifs correctly.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/EmptyComment": {
      "title": "Layout/EmptyComment",
      "description": "Checks empty comment.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            },
            "AllowBorderComment": {
              "type": "boolean",
              "default": true
            },
            "AllowMarginComment": {
              "type": "boolean",
              "default": true
            }
          }
        }
      ]
    },
    "Layout/EmptyLineAfterGuardClause": {
      "title": "Layout/EmptyLineAfterGuardClause",
      "description": "Add empty line after guard clause.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/EmptyLineAfterMagicComment": {
      "title": "Layout/EmptyLineAfterMagicComment",
      "description": "Add an empty line after magic comments to separate them from code.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/EmptyLineAfterMultilineCondition": {
      "title": "Layout/EmptyLineAfterMultilineCondition",
      "description": "Enforces empty line after multiline condition.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": false
            },
            "References": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "https://github.com/airbnb/ruby#multiline-if-newline"
              ]
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/EmptyLineBetweenDefs": {
      "title": "Layout/EmptyLineBetweenDefs",
      "description": "Use empty lines between class/module/method defs.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EmptyLineBetweenMethodDefs": {
              "type": "boolean",
              "default": true
            },
            "EmptyLineBetweenClassDefs": {
              "type": "boolean",
              "default": true
            },
            "EmptyLineBetweenModuleDefs": {
              "type": "boolean",
              "default": true
            },
            "DefLikeMacros": {
              "type": "array",
              "items": {},
              "default": []
            },
            "AllowAdjacentOneLineDefs": {
              "type": "boolean",
              "default": true
            },
            "NumberOfEmptyLines": {
              "type": "integer",
              "default": 1
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/EmptyLinesAroundAccessModifier": {
      "title": "Layout/EmptyLinesAroundAccessModifier",
      "description": "Keep blank lines around access modifiers.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "around",
                    "only_before"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "around",
                      "only_before"
                    ]
                  }
                }
              ],
              "default": "around"
            },
            "References": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#follow-the-coding-conventions"
              ]
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/EmptyLinesAroundArguments": {
      "title": "Layout/EmptyLinesAroundArguments",
      "description": "Keeps track of empty lines around method arguments.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/EmptyLinesAroundAttributeAccessor": {
      "title": "Layout/EmptyLinesAroundAttributeAccessor",
      "description": "Keep blank lines around attribute accessors.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AllowAliasSyntax": {
              "type": "boolean",
              "default": true
            },
            "AllowedMethods": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "alias_method",
                "public",
                "protected",
                "private"
              ]
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/EmptyLinesAroundBeginBody": {
      "title": "Layout/EmptyLinesAroundBeginBody",
      "description": "Keeps track of empty lines around begin-end bodies.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/EmptyLinesAroundBlockBody": {
      "title": "Layout/EmptyLinesAroundBlockBody",
      "description": "Keeps track of empty lines around block bodies.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "empty_lines",
                    "no_empty_lines"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "empty_lines",
                      "no_empty_lines"
                    ]
                  }
                }
              ],
              "default": "no_empty_lines"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/EmptyLinesAroundClassBody": {
      "title": "Layout/EmptyLinesAroundClassBody",
      "description": "Keeps track of empty lines around class bodies.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "empty_lines",
                    "empty_lines_except_namespace",
                    "empty_lines_special",
                    "no_empty_lines",
                    "beginning_only",
                    "ending_only"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "empty_lines",
                      "empty_lines_except_namespace",
                      "empty_lines_special",
                      "no_empty_lines",
                      "beginning_only",
                      "ending_only"
                    ]
                  }
                }
              ],
              "default": "no_empty_lines"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/EmptyLinesAroundExceptionHandlingKeywords": {
      "title": "Layout/EmptyLinesAroundExceptionHandlingKeywords",
      "description": "Keeps track of empty lines around exception handling keywords.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/EmptyLinesAroundMethodBody": {
      "title": "Layout/EmptyLinesAroundMethodBody",
      "description": "Keeps track of empty lines around method bodies.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/EmptyLinesAroundModuleBody": {
      "title": "Layout/EmptyLinesAroundModuleBody",
      "description": "Keeps track of empty lines around module bodies.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "empty_lines",
                    "empty_lines_except_namespace",
                    "empty_lines_special",
                    "no_empty_lines"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "empty_lines",
                      "empty_lines_except_namespace",
                      "empty_lines_special",
                      "no_empty_lines"
                    ]
                  }
                }
              ],
              "default": "no_empty_lines"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/EmptyLines": {
      "title": "Layout/EmptyLines",
      "description": "Don't use several empty lines in a row.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/EndAlignment": {
      "title": "Layout/EndAlignment",
      "description": "Align ends correctly.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyleAlignWith": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "keyword",
                    "variable",
                    "start_of_line"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "keyword",
                      "variable",
                      "start_of_line"
                    ]
                  }
                }
              ],
              "default": "keyword"
            },
            "Severity": {
              "type": "string",
              "default": "warning"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/EndOfLine": {
      "title": "Layout/EndOfLine",
      "description": "Use Unix-style line endings.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "native",
                    "lf",
                    "crlf"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "native",
                      "lf",
                      "crlf"
                    ]
                  }
                }
              ],
              "default": "native"
            }
          }
        }
      ]
    },
    "Layout/ExtraSpacing": {
      "title": "Layout/ExtraSpacing",
      "description": "Do not use unnecessary spacing.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AllowForAlignment": {
              "type": "boolean",
              "default": true
            },
            "AllowBeforeTrailingComments": {
              "type": "boolean",
              "default": false
            },
            "ForceEqualSignAlignment": {
              "type": "boolean",
              "default": false
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/FirstArgumentIndentation": {
      "title": "Layout/FirstArgumentIndentation",
      "description": "Checks the indentation of the first argument in a method call.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "consistent",
                    "consistent_relative_to_receiver",
                    "special_for_inner_method_call",
                    "special_for_inner_method_call_in_parentheses"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "consistent",
                      "consistent_relative_to_receiver",
                      "special_for_inner_method_call",
                      "special_for_inner_method_call_in_parentheses"
                    ]
                  }
                }
              ],
              "default": "special_for_inner_method_call_in_parentheses"
            },
            "IndentationWidth": {
              "type": "integer"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/FirstArrayElementIndentation": {
      "title": "Layout/FirstArrayElementIndentation",
      "description": "Checks the indentation of the first element in an array literal.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "special_inside_parentheses",
                    "consistent",
                    "align_brackets"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "special_inside_parentheses",
                      "consistent",
                      "align_brackets"
                    ]
                  }
                }
              ],
              "default": "special_inside_parentheses"
            },
            "IndentationWidth": {
              "type": "integer"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/FirstArrayElementLineBreak": {
      "title": "Layout/FirstArrayElementLineBreak",
      "description": "Checks for a line break before the first element in a multi-line array.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": false
            },
            "AllowMultilineFinalElement": {
              "type": "boolean",
              "default": false
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/FirstHashElementIndentation": {
      "title": "Layout/FirstHashElementIndentation",
      "description": "Checks the indentation of the first key in a hash literal.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "special_inside_parentheses",
                    "consistent",
                    "align_braces"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "special_inside_parentheses",
                      "consistent",
                      "align_braces"
                    ]
                  }
                }
              ],
              "default": "special_inside_parentheses"
            },
            "IndentationWidth": {
              "type": "integer"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/FirstHashElementLineBreak": {
      "title": "Layout/FirstHashElementLineBreak",
      "description": "Checks for a line break before the first element in a multi-line hash.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": false
            },
            "AllowMultilineFinalElement": {
              "type": "boolean",
              "default": false
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/FirstMethodArgumentLineBreak": {
      "title": "Layout/FirstMethodArgumentLineBreak",
      "description": "Checks for a line break before the first argument in a multi-line method call.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": false
            },
            "AllowMultilineFinalElement": {
              "type": "boolean",
              "default": false
            },
            "AllowedMethods": {
              "type": "array",
              "items": {},
              "default": []
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/FirstMethodParameterLineBreak": {
      "title": "Layout/FirstMethodParameterLineBreak",
      "description": "Checks for a line break before the first parameter in a multi-line method parameter definition.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": false
            },
            "AllowMultilineFinalElement": {
              "type": "boolean",
              "default": false
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/FirstParameterIndentation": {
      "title": "Layout/FirstParameterIndentation",
      "description": "Checks the indentation of the first parameter in a method definition.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "consistent",
                    "align_parentheses"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "consistent",
                      "align_parentheses"
                    ]
                  }
                }
              ],
              "default": "consistent"
            },
            "IndentationWidth": {
              "type": "integer"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/HashAlignment": {
      "title": "Layout/HashAlignment",
      "description": "Align the elements of a hash literal if they span more than one line.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AllowMultipleStyles": {
              "type": "boolean",
              "default": true
            },
            "EnforcedHashRocketStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "key",
                    "separator",
                    "table"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "key",
                      "separator",
                      "table"
                    ]
                  }
                }
              ],
              "default": "key"
            },
            "EnforcedColonStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "key",
                    "separator",
                    "table"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "key",
                      "separator",
                      "table"
                    ]
                  }
                }
              ],
              "default": "key"
            },
            "EnforcedLastArgumentHashStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "always_inspect",
                    "always_ignore",
                    "ignore_implicit",
                    "ignore_explicit"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "always_inspect",
                      "always_ignore",
                      "ignore_implicit",
                      "ignore_explicit"
                    ]
                  }
                }
              ],
              "default": "always_inspect"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/HeredocArgumentClosingParenthesis": {
      "title": "Layout/HeredocArgumentClosingParenthesis",
      "description": "Checks for the placement of the closing parenthesis in a method call that passes a HEREDOC string as an argument.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": false
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/HeredocIndentation": {
      "title": "Layout/HeredocIndentation",
      "description": "Checks the indentation of the here document bodies.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/IndentationConsistency": {
      "title": "Layout/IndentationConsistency",
      "description": "Keep indentation straight.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "normal",
                    "indented_internal_methods"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "normal",
                      "indented_internal_methods"
                    ]
                  }
                }
              ],
              "default": "normal"
            },
            "References": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#follow-the-coding-conventions"
              ]
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/IndentationStyle": {
      "title": "Layout/IndentationStyle",
      "description": "Consistent indentation either with tabs only or spaces only.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "IndentationWidth": {
              "type": "integer"
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "spaces",
                    "tabs"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "spaces",
                      "tabs"
                    ]
                  }
                }
              ],
              "default": "spaces"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/IndentationWidth": {
      "title": "Layout/IndentationWidth",
      "description": "Use 2 spaces for indentation.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "Width": {
              "type": "integer",
              "default": 2
            },
            "AllowedPatterns": {
              "type": "array",
              "default": []
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/InitialIndentation": {
      "title": "Layout/InitialIndentation",
      "description": "Checks the indentation of the first non-blank non-comment line in a file.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/LeadingCommentSpace": {
      "title": "Layout/LeadingCommentSpace",
      "description": "Comments should start with a space.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AllowDoxygenCommentStyle": {
              "type": "boolean",
              "default": false
            },
            "AllowGemfileRubyComment": {
              "type": "boolean",
              "default": false
            },
            "AllowRBSInlineAnnotation": {
              "type": "boolean",
              "default": false
            },
            "AllowSteepAnnotation": {
              "type": "boolean",
              "default": false
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/LeadingEmptyLines": {
      "title": "Layout/LeadingEmptyLines",
      "description": "Check for unnecessary blank lines at the beginning of a file.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/LineContinuationLeadingSpace": {
      "title": "Layout/LineContinuationLeadingSpace",
      "description": "Use trailing spaces instead of leading spaces in strings broken over multiple lines (by a backslash).",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "leading",
                    "trailing"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "leading",
                      "trailing"
                    ]
                  }
                }
              ],
              "default": "trailing"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/LineContinuationSpacing": {
      "title": "Layout/LineContinuationSpacing",
      "description": "Checks the spacing in front of backslash in line continuations.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "space",
                    "no_space"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "space",
                      "no_space"
                    ]
                  }
                }
              ],
              "default": "space"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/LineEndStringConcatenationIndentation": {
      "title": "Layout/LineEndStringConcatenationIndentation",
      "description": "Checks the indentation of the next line after a line that ends with a string literal and a backslash.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "aligned",
                    "indented"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "aligned",
                      "indented"
                    ]
                  }
                }
              ],
              "default": "aligned"
            },
            "IndentationWidth": {
              "type": "integer"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/LineLength": {
      "title": "Layout/LineLength",
      "description": "Checks that line length does not exceed the configured limit.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "Max": {
              "type": "integer",
              "default": 120
            },
            "AllowHeredoc": {
              "type": "boolean",
              "default": true
            },
            "AllowURI": {
              "type": "boolean",
              "default": true
            },
            "URISchemes": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "http",
                "https"
              ]
            },
            "IgnoreCopDirectives": {
              "type": "boolean",
              "default": true
            },
            "AllowedPatterns": {
              "type": "array",
              "default": []
            },
            "SplitStrings": {
              "type": "boolean",
              "default": false
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/MultilineArrayBraceLayout": {
      "title": "Layout/MultilineArrayBraceLayout",
      "description": "Checks that the closing brace in an array literal is either on the same line as the last array element, or a new line.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "symmetrical",
                    "new_line",
                    "same_line"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "symmetrical",
                      "new_line",
                      "same_line"
                    ]
                  }
                }
              ],
              "default": "symmetrical"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/MultilineArrayLineBreaks": {
      "title": "Layout/MultilineArrayLineBreaks",
      "description": "Checks that each item in a multi-line array literal starts on a separate line.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": false
            },
            "AllowMultilineFinalElement": {
              "type": "boolean",
              "default": false
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/MultilineAssignmentLayout": {
      "title": "Layout/MultilineAssignmentLayout",
      "description": "Check for a newline after the assignment operator in multi-line assignments.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": false
            },
            "SupportedTypes": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "block",
                "case",
                "class",
                "if",
                "kwbegin",
                "module"
              ]
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "same_line",
                    "new_line"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "same_line",
                      "new_line"
                    ]
                  }
                }
              ],
              "default": "new_line"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/MultilineBlockLayout": {
      "title": "Layout/MultilineBlockLayout",
      "description": "Ensures newlines after multiline block do statements.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/MultilineHashBraceLayout": {
      "title": "Layout/MultilineHashBraceLayout",
      "description": "Checks that the closing brace in a hash literal is either on the same line as the last hash element, or a new line.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "symmetrical",
                    "new_line",
                    "same_line"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "symmetrical",
                      "new_line",
                      "same_line"
                    ]
                  }
                }
              ],
              "default": "symmetrical"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/MultilineHashKeyLineBreaks": {
      "title": "Layout/MultilineHashKeyLineBreaks",
      "description": "Checks that each item in a multi-line hash literal starts on a separate line.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": false
            },
            "AllowMultilineFinalElement": {
              "type": "boolean",
              "default": false
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/MultilineMethodArgumentLineBreaks": {
      "title": "Layout/MultilineMethodArgumentLineBreaks",
      "description": "Checks that each argument in a multi-line method call starts on a separate line.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": false
            },
            "AllowMultilineFinalElement": {
              "type": "boolean",
              "default": false
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/MultilineMethodCallBraceLayout": {
      "title": "Layout/MultilineMethodCallBraceLayout",
      "description": "Checks that the closing brace in a method call is either on the same line as the last method argument, or a new line.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "symmetrical",
                    "new_line",
                    "same_line"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "symmetrical",
                      "new_line",
                      "same_line"
                    ]
                  }
                }
              ],
              "default": "symmetrical"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/MultilineMethodCallIndentation": {
      "title": "Layout/MultilineMethodCallIndentation",
      "description": "Checks indentation of method calls with the dot operator that span more than one line.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "aligned",
                    "indented",
                    "indented_relative_to_receiver"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "aligned",
                      "indented",
                      "indented_relative_to_receiver"
                    ]
                  }
                }
              ],
              "default": "aligned"
            },
            "IndentationWidth": {
              "type": "integer"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/MultilineMethodDefinitionBraceLayout": {
      "title": "Layout/MultilineMethodDefinitionBraceLayout",
      "description": "Checks that the closing brace in a method definition is either on the same line as the last method parameter, or a new line.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "symmetrical",
                    "new_line",
                    "same_line"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "symmetrical",
                      "new_line",
                      "same_line"
                    ]
                  }
                }
              ],
              "default": "symmetrical"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/MultilineMethodParameterLineBreaks": {
      "title": "Layout/MultilineMethodParameterLineBreaks",
      "description": "Checks that each parameter in a multi-line method definition starts on a separate line.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": false
            },
            "AllowMultilineFinalElement": {
              "type": "boolean",
              "default": false
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/MultilineOperationIndentation": {
      "title": "Layout/MultilineOperationIndentation",
      "description": "Checks indentation of binary operations that span more than one line.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "aligned",
                    "indented"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "aligned",
                      "indented"
                    ]
                  }
                }
              ],
              "default": "aligned"
            },
            "IndentationWidth": {
              "type": "integer"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/ParameterAlignment": {
      "title": "Layout/ParameterAlignment",
      "description": "Align the parameters of a method definition if they span more than one line.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "with_first_parameter",
                    "with_fixed_indentation"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "with_first_parameter",
                      "with_fixed_indentation"
                    ]
                  }
                }
              ],
              "default": "with_first_parameter"
            },
            "IndentationWidth": {
              "type": "integer"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/RedundantLineBreak": {
      "title": "Layout/RedundantLineBreak",
      "description": "Do not break up an expression into multiple lines when it fits on a single line.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": false
            },
            "InspectBlocks": {
              "type": "boolean",
              "default": false
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/RescueEnsureAlignment": {
      "title": "Layout/RescueEnsureAlignment",
      "description": "Align rescues and ensures correctly.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/SingleLineBlockChain": {
      "title": "Layout/SingleLineBlockChain",
      "description": "Put method call on a separate line if chained to a single line block.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": false
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/SpaceAfterColon": {
      "title": "Layout/SpaceAfterColon",
      "description": "Use spaces after colons.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/SpaceAfterComma": {
      "title": "Layout/SpaceAfterComma",
      "description": "Use spaces after commas.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/SpaceAfterMethodName": {
      "title": "Layout/SpaceAfterMethodName",
      "description": "Do not put a space between a method name and the opening parenthesis in a method definition.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/SpaceAfterNot": {
      "title": "Layout/SpaceAfterNot",
      "description": "Tracks redundant space after the ! operator.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/SpaceAfterSemicolon": {
      "title": "Layout/SpaceAfterSemicolon",
      "description": "Use spaces after semicolons.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/SpaceAroundBlockParameters": {
      "title": "Layout/SpaceAroundBlockParameters",
      "description": "Checks the spacing inside and after block parameters pipes.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyleInsidePipes": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "space",
                    "no_space"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "space",
                      "no_space"
                    ]
                  }
                }
              ],
              "default": "no_space"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/SpaceAroundEqualsInParameterDefault": {
      "title": "Layout/SpaceAroundEqualsInParameterDefault",
      "description": "Checks that the equals signs in parameter default assignments have or don't have surrounding space depending on configuration.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "space",
                    "no_space"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "space",
                      "no_space"
                    ]
                  }
                }
              ],
              "default": "space"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/SpaceAroundKeyword": {
      "title": "Layout/SpaceAroundKeyword",
      "description": "Use a space around keywords if appropriate.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/SpaceAroundMethodCallOperator": {
      "title": "Layout/SpaceAroundMethodCallOperator",
      "description": "Checks method call operators to not have spaces around them.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/SpaceAroundOperators": {
      "title": "Layout/SpaceAroundOperators",
      "description": "Use a single space around operators.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AllowForAlignment": {
              "type": "boolean",
              "default": true
            },
            "EnforcedStyleForExponentOperator": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "space",
                    "no_space"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "space",
                      "no_space"
                    ]
                  }
                }
              ],
              "default": "no_space"
            },
            "EnforcedStyleForRationalLiterals": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "space",
                    "no_space"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "space",
                      "no_space"
                    ]
                  }
                }
              ],
              "default": "no_space"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/SpaceBeforeBlockBraces": {
      "title": "Layout/SpaceBeforeBlockBraces",
      "description": "Checks that the left block brace has or doesn't have space before it.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "space",
                    "no_space"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "space",
                      "no_space"
                    ]
                  }
                }
              ],
              "default": "space"
            },
            "EnforcedStyleForEmptyBraces": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "space",
                    "no_space"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "space",
                      "no_space"
                    ]
                  }
                }
              ],
              "default": "space"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/SpaceBeforeBrackets": {
      "title": "Layout/SpaceBeforeBrackets",
      "description": "Checks for receiver with a space before the opening brackets.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/SpaceBeforeComma": {
      "title": "Layout/SpaceBeforeComma",
      "description": "No spaces before commas.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/SpaceBeforeComment": {
      "title": "Layout/SpaceBeforeComment",
      "description": "Checks for missing space between code and a comment on the same line.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/SpaceBeforeFirstArg": {
      "title": "Layout/SpaceBeforeFirstArg",
      "description": "Checks that exactly one space is used between a method name and the first argument for method calls without parentheses.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AllowForAlignment": {
              "type": "boolean",
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/SpaceBeforeSemicolon": {
      "title": "Layout/SpaceBeforeSemicolon",
      "description": "No spaces before semicolons.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/SpaceInLambdaLiteral": {
      "title": "Layout/SpaceInLambdaLiteral",
      "description": "Checks for spaces in lambda literals.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "require_no_space",
                    "require_space"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "require_no_space",
                      "require_space"
                    ]
                  }
                }
              ],
              "default": "require_no_space"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/SpaceInsideArrayPercentLiteral": {
      "title": "Layout/SpaceInsideArrayPercentLiteral",
      "description": "No unnecessary additional spaces between elements in %i/%w literals.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/SpaceInsideArrayLiteralBrackets": {
      "title": "Layout/SpaceInsideArrayLiteralBrackets",
      "description": "Checks the spacing inside array literal brackets.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "space",
                    "no_space",
                    "compact"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "space",
                      "no_space",
                      "compact"
                    ]
                  }
                }
              ],
              "default": "no_space"
            },
            "EnforcedStyleForEmptyBrackets": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "space",
                    "no_space"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "space",
                      "no_space"
                    ]
                  }
                }
              ],
              "default": "no_space"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/SpaceInsideBlockBraces": {
      "title": "Layout/SpaceInsideBlockBraces",
      "description": "Checks that block braces have or don't have surrounding space. For blocks taking parameters, checks that the left brace has or doesn't have trailing space.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "space",
                    "no_space"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "space",
                      "no_space"
                    ]
                  }
                }
              ],
              "default": "space"
            },
            "EnforcedStyleForEmptyBraces": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "space",
                    "no_space"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "space",
                      "no_space"
                    ]
                  }
                }
              ],
              "default": "no_space"
            },
            "SpaceBeforeBlockParameters": {
              "type": "boolean",
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/SpaceInsideHashLiteralBraces": {
      "title": "Layout/SpaceInsideHashLiteralBraces",
      "description": "Use spaces inside hash literal braces - or don't.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "space",
                    "no_space",
                    "compact"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "space",
                      "no_space",
                      "compact"
                    ]
                  }
                }
              ],
              "default": "space"
            },
            "EnforcedStyleForEmptyBraces": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "space",
                    "no_space"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "space",
                      "no_space"
                    ]
                  }
                }
              ],
              "default": "no_space"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/SpaceInsideParens": {
      "title": "Layout/SpaceInsideParens",
      "description": "No spaces after ( or before ).",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "space",
                    "compact",
                    "no_space"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "space",
                      "compact",
                      "no_space"
                    ]
                  }
                }
              ],
              "default": "no_space"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/SpaceInsidePercentLiteralDelimiters": {
      "title": "Layout/SpaceInsidePercentLiteralDelimiters",
      "description": "No unnecessary spaces inside delimiters of %i/%w/%x literals.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/SpaceInsideRangeLiteral": {
      "title": "Layout/SpaceInsideRangeLiteral",
      "description": "No spaces inside range literals.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/SpaceInsideReferenceBrackets": {
      "title": "Layout/SpaceInsideReferenceBrackets",
      "description": "Checks the spacing inside referential brackets.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "space",
                    "no_space"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "space",
                      "no_space"
                    ]
                  }
                }
              ],
              "default": "no_space"
            },
            "EnforcedStyleForEmptyBrackets": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "space",
                    "no_space"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "space",
                      "no_space"
                    ]
                  }
                }
              ],
              "default": "no_space"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/SpaceInsideStringInterpolation": {
      "title": "Layout/SpaceInsideStringInterpolation",
      "description": "Checks for padding/surrounding spaces inside string interpolation.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "space",
                    "no_space"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "space",
                      "no_space"
                    ]
                  }
                }
              ],
              "default": "no_space"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/TrailingEmptyLines": {
      "title": "Layout/TrailingEmptyLines",
      "description": "Checks trailing blank lines and final newline.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "final_newline",
                    "final_blank_line"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "final_newline",
                      "final_blank_line"
                    ]
                  }
                }
              ],
              "default": "final_newline"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Layout/TrailingWhitespace": {
      "title": "Layout/TrailingWhitespace",
      "description": "Avoid trailing whitespace.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AllowInHeredoc": {
              "type": "boolean",
              "default": false
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/AmbiguousAssignment": {
      "title": "Lint/AmbiguousAssignment",
      "description": "Checks for mistyped shorthand assignments.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            }
          }
        }
      ]
    },
    "Lint/AmbiguousBlockAssociation": {
      "title": "Lint/AmbiguousBlockAssociation",
      "description": "Checks for ambiguous block association with method when param passed without parentheses.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AllowedMethods": {
              "type": "array",
              "items": {},
              "default": []
            },
            "AllowedPatterns": {
              "type": "array",
              "default": []
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/AmbiguousOperator": {
      "title": "Lint/AmbiguousOperator",
      "description": "Checks for ambiguous operators in the first argument of a method invocation without parentheses.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/AmbiguousOperatorPrecedence": {
      "title": "Lint/AmbiguousOperatorPrecedence",
      "description": "Checks for expressions containing multiple binary operations with ambiguous precedence.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/AmbiguousRange": {
      "title": "Lint/AmbiguousRange",
      "description": "Checks for ranges with ambiguous boundaries.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "RequireParenthesesForMethodChains": {
              "type": "boolean",
              "default": false
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/AmbiguousRegexpLiteral": {
      "title": "Lint/AmbiguousRegexpLiteral",
      "description": "Checks for ambiguous regexp literals in the first argument of a method invocation without parentheses.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/ArrayLiteralInRegexp": {
      "title": "Lint/ArrayLiteralInRegexp",
      "description": "Checks for an array literal interpolated inside a regexp.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/AssignmentInCondition": {
      "title": "Lint/AssignmentInCondition",
      "description": "Don't use assignment in conditions.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AllowSafeAssignment": {
              "type": "boolean",
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/BigDecimalNew": {
      "title": "Lint/BigDecimalNew",
      "description": "`BigDecimal.new()` is deprecated. Use `BigDecimal()` instead.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/BinaryOperatorWithIdenticalOperands": {
      "title": "Lint/BinaryOperatorWithIdenticalOperands",
      "description": "Checks for places where binary operator has identical operands.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            }
          }
        }
      ]
    },
    "Lint/BooleanSymbol": {
      "title": "Lint/BooleanSymbol",
      "description": "Check for `:true` and `:false` symbols.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/CircularArgumentReference": {
      "title": "Lint/CircularArgumentReference",
      "description": "Default values in optional keyword arguments and optional ordinal arguments should not refer back to the name of the argument.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            }
          }
        }
      ]
    },
    "Lint/ConstantDefinitionInBlock": {
      "title": "Lint/ConstantDefinitionInBlock",
      "description": "Do not define constants within a block.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AllowedMethods": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "enums"
              ]
            }
          }
        }
      ]
    },
    "Lint/ConstantOverwrittenInRescue": {
      "title": "Lint/ConstantOverwrittenInRescue",
      "description": "Checks for overwriting an exception with an exception result by use `rescue =>`.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/ConstantReassignment": {
      "title": "Lint/ConstantReassignment",
      "description": "Checks for constant reassignments.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            }
          }
        }
      ]
    },
    "Lint/ConstantResolution": {
      "title": "Lint/ConstantResolution",
      "description": "Check that constants are fully qualified with `::`.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": false
            },
            "Only": {
              "type": "array",
              "items": {},
              "default": []
            },
            "Ignore": {
              "type": "array",
              "items": {},
              "default": []
            }
          }
        }
      ]
    },
    "Lint/CopDirectiveSyntax": {
      "title": "Lint/CopDirectiveSyntax",
      "description": "Checks that `# rubocop:` directives are strictly formatted.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            }
          }
        }
      ]
    },
    "Lint/Debugger": {
      "title": "Lint/Debugger",
      "description": "Check for debugger calls.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "DebuggerMethods": {
              "type": "object",
              "default": {
                "Kernel": [
                  "binding.irb",
                  "Kernel.binding.irb"
                ],
                "Byebug": [
                  "byebug",
                  "remote_byebug",
                  "Kernel.byebug",
                  "Kernel.remote_byebug"
                ],
                "Capybara": [
                  "page.save_and_open_page",
                  "page.save_and_open_screenshot",
                  "page.save_page",
                  "page.save_screenshot",
                  "save_and_open_page",
                  "save_and_open_screenshot",
                  "save_page",
                  "save_screenshot"
                ],
                "debug.rb": [
                  "binding.b",
                  "binding.break",
                  "Kernel.binding.b",
                  "Kernel.binding.break"
                ],
                "Pry": [
                  "binding.pry",
                  "binding.remote_pry",
                  "binding.pry_remote",
                  "Kernel.binding.pry",
                  "Kernel.binding.remote_pry",
                  "Kernel.binding.pry_remote",
                  "Pry.rescue",
                  "pry"
                ],
                "Rails": [
                  "debugger",
                  "Kernel.debugger"
                ],
                "RubyJard": [
                  "jard"
                ],
                "WebConsole": [
                  "binding.console"
                ]
              }
            },
            "DebuggerRequires": {
              "type": "object",
              "default": {
                "debug.rb": [
                  "debug/open",
                  "debug/start"
                ]
              }
            }
          }
        }
      ]
    },
    "Lint/DeprecatedClassMethods": {
      "title": "Lint/DeprecatedClassMethods",
      "description": "Check for deprecated class method calls.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/DeprecatedConstants": {
      "title": "Lint/DeprecatedConstants",
      "description": "Checks for deprecated constants.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "DeprecatedConstants": {
              "type": "object",
              "default": {
                "NIL": {
                  "Alternative": "nil",
                  "DeprecatedVersion": "2.4"
                },
                "TRUE": {
                  "Alternative": "true",
                  "DeprecatedVersion": "2.4"
                },
                "FALSE": {
                  "Alternative": "false",
                  "DeprecatedVersion": "2.4"
                },
                "Net::HTTPServerException": {
                  "Alternative": "Net::HTTPClientException",
                  "DeprecatedVersion": "2.6"
                },
                "Random::DEFAULT": {
                  "Alternative": "Random.new",
                  "DeprecatedVersion": "3.0"
                },
                "Struct::Group": {
                  "Alternative": "Etc::Group",
                  "DeprecatedVersion": "3.0"
                },
                "Struct::Passwd": {
                  "Alternative": "Etc::Passwd",
                  "DeprecatedVersion": "3.0"
                }
              }
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/DeprecatedOpenSSLConstant": {
      "title": "Lint/DeprecatedOpenSSLConstant",
      "description": "Don't use algorithm constants for `OpenSSL::Cipher` and `OpenSSL::Digest`.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/DisjunctiveAssignmentInConstructor": {
      "title": "Lint/DisjunctiveAssignmentInConstructor",
      "description": "In constructor, plain assignment is preferred over disjunctive.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/DuplicateBranch": {
      "title": "Lint/DuplicateBranch",
      "description": "Checks that there are no repeated bodies within `if/unless`, `case-when` and `rescue` constructs.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "IgnoreLiteralBranches": {
              "type": "boolean",
              "default": false
            },
            "IgnoreConstantBranches": {
              "type": "boolean",
              "default": false
            },
            "IgnoreDuplicateElseBranch": {
              "type": "boolean",
              "default": false
            }
          }
        }
      ]
    },
    "Lint/DuplicateCaseCondition": {
      "title": "Lint/DuplicateCaseCondition",
      "description": "Do not repeat values in case conditionals.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            }
          }
        }
      ]
    },
    "Lint/DuplicateElsifCondition": {
      "title": "Lint/DuplicateElsifCondition",
      "description": "Do not repeat conditions used in if `elsif`.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            }
          }
        }
      ]
    },
    "Lint/DuplicateHashKey": {
      "title": "Lint/DuplicateHashKey",
      "description": "Check for duplicate keys in hash literals.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            }
          }
        }
      ]
    },
    "Lint/DuplicateMagicComment": {
      "title": "Lint/DuplicateMagicComment",
      "description": "Check for duplicated magic comments.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/DuplicateMatchPattern": {
      "title": "Lint/DuplicateMatchPattern",
      "description": "Do not repeat patterns in `in` keywords.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            }
          }
        }
      ]
    },
    "Lint/DuplicateMethods": {
      "title": "Lint/DuplicateMethods",
      "description": "Check for duplicate method definitions.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            }
          }
        }
      ]
    },
    "Lint/DuplicateRegexpCharacterClassElement": {
      "title": "Lint/DuplicateRegexpCharacterClassElement",
      "description": "Checks for duplicate elements in Regexp character classes.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/DuplicateRequire": {
      "title": "Lint/DuplicateRequire",
      "description": "Check for duplicate `require`s and `require_relative`s.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/DuplicateRescueException": {
      "title": "Lint/DuplicateRescueException",
      "description": "Checks that there are no repeated exceptions used in `rescue` expressions.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            }
          }
        }
      ]
    },
    "Lint/DuplicateSetElement": {
      "title": "Lint/DuplicateSetElement",
      "description": "Checks for duplicate elements in Set.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/EachWithObjectArgument": {
      "title": "Lint/EachWithObjectArgument",
      "description": "Check for immutable argument given to each_with_object.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            }
          }
        }
      ]
    },
    "Lint/ElseLayout": {
      "title": "Lint/ElseLayout",
      "description": "Check for odd code arrangement in an else block.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/EmptyBlock": {
      "title": "Lint/EmptyBlock",
      "description": "Checks for blocks without a body.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AllowComments": {
              "type": "boolean",
              "default": true
            },
            "AllowEmptyLambdas": {
              "type": "boolean",
              "default": true
            }
          }
        }
      ]
    },
    "Lint/EmptyClass": {
      "title": "Lint/EmptyClass",
      "description": "Checks for classes and metaclasses without a body.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AllowComments": {
              "type": "boolean",
              "default": false
            }
          }
        }
      ]
    },
    "Lint/EmptyConditionalBody": {
      "title": "Lint/EmptyConditionalBody",
      "description": "Checks for the presence of `if`, `elsif` and `unless` branches without a body.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            },
            "AllowComments": {
              "type": "boolean",
              "default": true
            }
          }
        }
      ]
    },
    "Lint/EmptyEnsure": {
      "title": "Lint/EmptyEnsure",
      "description": "Checks for empty ensure block.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/EmptyExpression": {
      "title": "Lint/EmptyExpression",
      "description": "Checks for empty expressions.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            }
          }
        }
      ]
    },
    "Lint/EmptyFile": {
      "title": "Lint/EmptyFile",
      "description": "Enforces that Ruby source files are not empty.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AllowComments": {
              "type": "boolean",
              "default": true
            }
          }
        }
      ]
    },
    "Lint/EmptyInPattern": {
      "title": "Lint/EmptyInPattern",
      "description": "Checks for the presence of `in` pattern branches without a body.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AllowComments": {
              "type": "boolean",
              "default": true
            }
          }
        }
      ]
    },
    "Lint/EmptyInterpolation": {
      "title": "Lint/EmptyInterpolation",
      "description": "Checks for empty string interpolation.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/EmptyWhen": {
      "title": "Lint/EmptyWhen",
      "description": "Checks for `when` branches with empty bodies.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AllowComments": {
              "type": "boolean",
              "default": true
            }
          }
        }
      ]
    },
    "Lint/EnsureReturn": {
      "title": "Lint/EnsureReturn",
      "description": "Do not use return in an ensure block.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            }
          }
        }
      ]
    },
    "Lint/SharedMutableDefault": {
      "title": "Lint/SharedMutableDefault",
      "description": "Checks for mutable literals used as default arguments during Hash initialization.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            }
          }
        }
      ]
    },
    "Lint/ErbNewArguments": {
      "title": "Lint/ErbNewArguments",
      "description": "Use `:trim_mode` and `:eoutvar` keyword arguments to `ERB.new`.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/FlipFlop": {
      "title": "Lint/FlipFlop",
      "description": "Checks for flip-flops.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            }
          }
        }
      ]
    },
    "Lint/FloatComparison": {
      "title": "Lint/FloatComparison",
      "description": "Checks for the presence of precise comparison of floating point numbers.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            }
          }
        }
      ]
    },
    "Lint/FloatOutOfRange": {
      "title": "Lint/FloatOutOfRange",
      "description": "Catches floating-point literals too large or small for Ruby to represent.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            }
          }
        }
      ]
    },
    "Lint/FormatParameterMismatch": {
      "title": "Lint/FormatParameterMismatch",
      "description": "The number of parameters to format/sprint must match the fields.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            }
          }
        }
      ]
    },
    "Lint/HashCompareByIdentity": {
      "title": "Lint/HashCompareByIdentity",
      "description": "Prefer using `Hash#compare_by_identity` than using `object_id` for keys.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            }
          }
        }
      ]
    },
    "Lint/HashNewWithKeywordArgumentsAsDefault": {
      "title": "Lint/HashNewWithKeywordArgumentsAsDefault",
      "description": "Checks for the deprecated use of keyword arguments for hash default in `Hash.new`.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/HeredocMethodCallPosition": {
      "title": "Lint/HeredocMethodCallPosition",
      "description": "Checks for the ordering of a method call where the receiver of the call is a HEREDOC.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": false
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/IdentityComparison": {
      "title": "Lint/IdentityComparison",
      "description": "Prefer `equal?` over `==` when comparing `object_id`.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/ImplicitStringConcatenation": {
      "title": "Lint/ImplicitStringConcatenation",
      "description": "Checks for adjacent string literals on the same line, which could better be represented as a single string literal.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/IncompatibleIoSelectWithFiberScheduler": {
      "title": "Lint/IncompatibleIoSelectWithFiberScheduler",
      "description": "Checks for `IO.select` that is incompatible with Fiber Scheduler.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/IneffectiveAccessModifier": {
      "title": "Lint/IneffectiveAccessModifier",
      "description": "Checks for attempts to use `private` or `protected` to set the visibility of a class method, which does not work.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            }
          }
        }
      ]
    },
    "Lint/InheritException": {
      "title": "Lint/InheritException",
      "description": "Avoid inheriting from the `Exception` class.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "standard_error",
                    "runtime_error"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "standard_error",
                      "runtime_error"
                    ]
                  }
                }
              ],
              "default": "standard_error"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/InterpolationCheck": {
      "title": "Lint/InterpolationCheck",
      "description": "Checks for interpolation in a single quoted string.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/ItWithoutArgumentsInBlock": {
      "title": "Lint/ItWithoutArgumentsInBlock",
      "description": "Checks uses of `it` calls without arguments in block.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "References": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "https://bugs.ruby-lang.org/issues/18980"
              ]
            },
            "Enabled": {
              "default": "pending"
            }
          }
        }
      ]
    },
    "Lint/LambdaWithoutLiteralBlock": {
      "title": "Lint/LambdaWithoutLiteralBlock",
      "description": "Checks uses of lambda without a literal block.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/LiteralAsCondition": {
      "title": "Lint/LiteralAsCondition",
      "description": "Checks of literals used in conditions.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/LiteralAssignmentInCondition": {
      "title": "Lint/LiteralAssignmentInCondition",
      "description": "Checks for literal assignments in the conditions.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            }
          }
        }
      ]
    },
    "Lint/LiteralInInterpolation": {
      "title": "Lint/LiteralInInterpolation",
      "description": "Checks for literals used in interpolation.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/Loop": {
      "title": "Lint/Loop",
      "description": "Use Kernel#loop with break rather than begin/end/until or begin/end/while for post-loop tests.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/MissingCopEnableDirective": {
      "title": "Lint/MissingCopEnableDirective",
      "description": "Checks for a `# rubocop:enable` after `# rubocop:disable`.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "MaximumRangeSize": {
              "type": "number"
            }
          }
        }
      ]
    },
    "Lint/MissingSuper": {
      "title": "Lint/MissingSuper",
      "description": "Checks for the presence of constructors and lifecycle callbacks without calls to `super`.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AllowedParentClasses": {
              "type": "array",
              "items": {},
              "default": []
            }
          }
        }
      ]
    },
    "Lint/MixedCaseRange": {
      "title": "Lint/MixedCaseRange",
      "description": "Checks for mixed-case character ranges since they include likely unintended characters.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/MixedRegexpCaptureTypes": {
      "title": "Lint/MixedRegexpCaptureTypes",
      "description": "Do not mix named captures and numbered captures in a Regexp literal.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            }
          }
        }
      ]
    },
    "Lint/MultipleComparison": {
      "title": "Lint/MultipleComparison",
      "description": "Use `&&` operator to compare multiple values.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/NestedMethodDefinition": {
      "title": "Lint/NestedMethodDefinition",
      "description": "Do not use nested method definitions.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AllowedMethods": {
              "type": "array",
              "items": {},
              "default": []
            },
            "AllowedPatterns": {
              "type": "array",
              "default": []
            }
          }
        }
      ]
    },
    "Lint/NestedPercentLiteral": {
      "title": "Lint/NestedPercentLiteral",
      "description": "Checks for nested percent literals.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            }
          }
        }
      ]
    },
    "Lint/NextWithoutAccumulator": {
      "title": "Lint/NextWithoutAccumulator",
      "description": "Do not omit the accumulator when calling `next` in a `reduce`/`inject` block.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            }
          }
        }
      ]
    },
    "Lint/NoReturnInBeginEndBlocks": {
      "title": "Lint/NoReturnInBeginEndBlocks",
      "description": "Do not `return` inside `begin..end` blocks in assignment contexts.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            }
          }
        }
      ]
    },
    "Lint/NonAtomicFileOperation": {
      "title": "Lint/NonAtomicFileOperation",
      "description": "Checks for non-atomic file operations.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/NonDeterministicRequireOrder": {
      "title": "Lint/NonDeterministicRequireOrder",
      "description": "Always sort arrays returned by Dir.glob when requiring files.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/NonLocalExitFromIterator": {
      "title": "Lint/NonLocalExitFromIterator",
      "description": "Do not use return in iterator to cause non-local exit.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            }
          }
        }
      ]
    },
    "Lint/NumberConversion": {
      "title": "Lint/NumberConversion",
      "description": "Checks unsafe usage of number conversion methods.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": false
            },
            "AllowedMethods": {
              "type": "array",
              "items": {},
              "default": []
            },
            "AllowedPatterns": {
              "type": "array",
              "default": []
            },
            "IgnoredClasses": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "Time",
                "DateTime"
              ]
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/NumberedParameterAssignment": {
      "title": "Lint/NumberedParameterAssignment",
      "description": "Checks for uses of numbered parameter assignment.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            }
          }
        }
      ]
    },
    "Lint/NumericOperationWithConstantResult": {
      "title": "Lint/NumericOperationWithConstantResult",
      "description": "Checks for numeric operations with constant results.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/OrAssignmentToConstant": {
      "title": "Lint/OrAssignmentToConstant",
      "description": "Checks unintended or-assignment to constant.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/OrderedMagicComments": {
      "title": "Lint/OrderedMagicComments",
      "description": "Checks the proper ordering of magic comments and whether a magic comment is not placed before a shebang.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/OutOfRangeRegexpRef": {
      "title": "Lint/OutOfRangeRegexpRef",
      "description": "Checks for out of range reference for Regexp because it always returns nil.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            }
          }
        }
      ]
    },
    "Lint/ParenthesesAsGroupedExpression": {
      "title": "Lint/ParenthesesAsGroupedExpression",
      "description": "Checks for method calls with a space before the opening parenthesis.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/PercentStringArray": {
      "title": "Lint/PercentStringArray",
      "description": "Checks for unwanted commas and quotes in %w/%W literals.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/PercentSymbolArray": {
      "title": "Lint/PercentSymbolArray",
      "description": "Checks for unwanted commas and colons in %i/%I literals.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/RaiseException": {
      "title": "Lint/RaiseException",
      "description": "Checks for `raise` or `fail` statements which are raising `Exception` class.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AllowedImplicitNamespaces": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "Gem"
              ]
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/RandOne": {
      "title": "Lint/RandOne",
      "description": "Checks for `rand(1)` calls. Such calls always return `0` and most likely a mistake.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            }
          }
        }
      ]
    },
    "Lint/RedundantCopDisableDirective": {
      "title": "Lint/RedundantCopDisableDirective",
      "description": "Checks for rubocop:disable comments that can be removed. Note: this cop is not disabled when disabling all cops. It must be explicitly disabled.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/RedundantCopEnableDirective": {
      "title": "Lint/RedundantCopEnableDirective",
      "description": "Checks for rubocop:enable comments that can be removed.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/RedundantDirGlobSort": {
      "title": "Lint/RedundantDirGlobSort",
      "description": "Checks for redundant `sort` method to `Dir.glob` and `Dir[]`.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/RedundantRegexpQuantifiers": {
      "title": "Lint/RedundantRegexpQuantifiers",
      "description": "Checks for redundant quantifiers in Regexps.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/RedundantRequireStatement": {
      "title": "Lint/RedundantRequireStatement",
      "description": "Checks for unnecessary `require` statement.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/RedundantSafeNavigation": {
      "title": "Lint/RedundantSafeNavigation",
      "description": "Checks for redundant safe navigation calls.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AllowedMethods": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "instance_of?",
                "kind_of?",
                "is_a?",
                "eql?",
                "respond_to?",
                "equal?"
              ]
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/RedundantSplatExpansion": {
      "title": "Lint/RedundantSplatExpansion",
      "description": "Checks for splat unnecessarily being called on literals.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AllowPercentLiteralArrayArgument": {
              "type": "boolean",
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/RedundantStringCoercion": {
      "title": "Lint/RedundantStringCoercion",
      "description": "Checks for Object#to_s usage in string interpolation.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/RedundantTypeConversion": {
      "title": "Lint/RedundantTypeConversion",
      "description": "Checks for redundantly converting a literal to the same type.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/RedundantWithIndex": {
      "title": "Lint/RedundantWithIndex",
      "description": "Checks for redundant `with_index`.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/RedundantWithObject": {
      "title": "Lint/RedundantWithObject",
      "description": "Checks for redundant `with_object`.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/RefinementImportMethods": {
      "title": "Lint/RefinementImportMethods",
      "description": "Use `Refinement#import_methods` when using `include` or `prepend` in `refine` block.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            }
          }
        }
      ]
    },
    "Lint/RegexpAsCondition": {
      "title": "Lint/RegexpAsCondition",
      "description": "Do not use regexp literal as a condition. The regexp literal matches `$_` implicitly.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/RequireParentheses": {
      "title": "Lint/RequireParentheses",
      "description": "Use parentheses in the method call to avoid confusion about precedence.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            }
          }
        }
      ]
    },
    "Lint/RequireRangeParentheses": {
      "title": "Lint/RequireRangeParentheses",
      "description": "Checks that a range literal is enclosed in parentheses when the end of the range is at a line break.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            }
          }
        }
      ]
    },
    "Lint/RequireRelativeSelfPath": {
      "title": "Lint/RequireRelativeSelfPath",
      "description": "Checks for uses a file requiring itself with `require_relative`.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/RescueException": {
      "title": "Lint/RescueException",
      "description": "Avoid rescuing the Exception class.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            }
          }
        }
      ]
    },
    "Lint/RescueType": {
      "title": "Lint/RescueType",
      "description": "Avoid rescuing from non constants that could result in a `TypeError`.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/ReturnInVoidContext": {
      "title": "Lint/ReturnInVoidContext",
      "description": "Checks for return in void context.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            }
          }
        }
      ]
    },
    "Lint/SafeNavigationConsistency": {
      "title": "Lint/SafeNavigationConsistency",
      "description": "Check to make sure that if safe navigation is used in an `&&` or `||` condition, consistent and appropriate safe navigation, without excess or deficiency, is used for all method calls on the same object.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AllowedMethods": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "present?",
                "blank?",
                "presence",
                "try",
                "try!"
              ]
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/SafeNavigationChain": {
      "title": "Lint/SafeNavigationChain",
      "description": "Do not chain ordinary method call after safe navigation operator.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AllowedMethods": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "present?",
                "blank?",
                "presence",
                "try",
                "try!",
                "in?"
              ]
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/SafeNavigationWithEmpty": {
      "title": "Lint/SafeNavigationWithEmpty",
      "description": "Avoid `foo&.empty?` in conditionals.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/ScriptPermission": {
      "title": "Lint/ScriptPermission",
      "description": "Grant script file execute permission.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/SelfAssignment": {
      "title": "Lint/SelfAssignment",
      "description": "Checks for self-assignments.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            }
          }
        }
      ]
    },
    "Lint/SendWithMixinArgument": {
      "title": "Lint/SendWithMixinArgument",
      "description": "Checks for `send` method when using mixin.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/ShadowedArgument": {
      "title": "Lint/ShadowedArgument",
      "description": "Avoid reassigning arguments before they were used.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "IgnoreImplicitReferences": {
              "type": "boolean",
              "default": false
            }
          }
        }
      ]
    },
    "Lint/ShadowedException": {
      "title": "Lint/ShadowedException",
      "description": "Avoid rescuing a higher level exception before a lower level exception.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            }
          }
        }
      ]
    },
    "Lint/ShadowingOuterLocalVariable": {
      "title": "Lint/ShadowingOuterLocalVariable",
      "description": "Do not use the same name as outer local variable for block arguments or block local variables.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": false
            }
          }
        }
      ]
    },
    "Lint/StructNewOverride": {
      "title": "Lint/StructNewOverride",
      "description": "Disallow overriding the `Struct` built-in methods via `Struct.new`.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            }
          }
        }
      ]
    },
    "Lint/SuppressedException": {
      "title": "Lint/SuppressedException",
      "description": "Don't suppress exceptions.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AllowComments": {
              "type": "boolean",
              "default": true
            },
            "AllowNil": {
              "type": "boolean",
              "default": true
            }
          }
        }
      ]
    },
    "Lint/SuppressedExceptionInNumberConversion": {
      "title": "Lint/SuppressedExceptionInNumberConversion",
      "description": "Checks for cases where exceptions unrelated to the numeric constructors may be unintentionally swallowed.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/SymbolConversion": {
      "title": "Lint/SymbolConversion",
      "description": "Checks for unnecessary symbol conversions.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "strict",
                    "consistent"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "strict",
                      "consistent"
                    ]
                  }
                }
              ],
              "default": "strict"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/Syntax": {
      "title": "Lint/Syntax",
      "description": "Checks for syntax errors.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            }
          }
        }
      ]
    },
    "Lint/ToEnumArguments": {
      "title": "Lint/ToEnumArguments",
      "description": "Ensures that `to_enum`/`enum_for`, called for the current method, has correct arguments.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            }
          }
        }
      ]
    },
    "Lint/ToJSON": {
      "title": "Lint/ToJSON",
      "description": "Ensure #to_json includes an optional argument.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/TopLevelReturnWithArgument": {
      "title": "Lint/TopLevelReturnWithArgument",
      "description": "Detects top level return statements with argument.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "Exclude": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/TrailingCommaInAttributeDeclaration": {
      "title": "Lint/TrailingCommaInAttributeDeclaration",
      "description": "Checks for trailing commas in attribute declarations.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/TripleQuotes": {
      "title": "Lint/TripleQuotes",
      "description": "Checks for useless triple quote constructs.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/UnderscorePrefixedVariableName": {
      "title": "Lint/UnderscorePrefixedVariableName",
      "description": "Do not use prefix `_` for a variable that is used.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AllowKeywordBlockArguments": {
              "type": "boolean",
              "default": false
            }
          }
        }
      ]
    },
    "Lint/UnescapedBracketInRegexp": {
      "title": "Lint/UnescapedBracketInRegexp",
      "description": "Checks for unescaped literal `]` in Regexp.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/UnexpectedBlockArity": {
      "title": "Lint/UnexpectedBlockArity",
      "description": "Looks for blocks that have fewer arguments that the calling method expects.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "Methods": {
              "type": "object",
              "default": {
                "chunk_while": 2,
                "each_with_index": 2,
                "each_with_object": 2,
                "inject": 2,
                "max": 2,
                "min": 2,
                "minmax": 2,
                "reduce": 2,
                "slice_when": 2,
                "sort": 2
              }
            }
          }
        }
      ]
    },
    "Lint/UnifiedInteger": {
      "title": "Lint/UnifiedInteger",
      "description": "Use Integer instead of Fixnum or Bignum.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/UnmodifiedReduceAccumulator": {
      "title": "Lint/UnmodifiedReduceAccumulator",
      "description": "Checks for `reduce` or `inject` blocks that do not update the accumulator each iteration.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            }
          }
        }
      ]
    },
    "Lint/UnreachableCode": {
      "title": "Lint/UnreachableCode",
      "description": "Unreachable code.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            }
          }
        }
      ]
    },
    "Lint/UnreachableLoop": {
      "title": "Lint/UnreachableLoop",
      "description": "Checks for loops that will have at most one iteration.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AllowedPatterns": {
              "type": "array",
              "default": [
                "(?-mix:(exactly|at_least|at_most)\\(\\d+\\)\\.times)"
              ]
            }
          }
        }
      ]
    },
    "Lint/UnusedBlockArgument": {
      "title": "Lint/UnusedBlockArgument",
      "description": "Checks for unused block arguments.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            },
            "IgnoreEmptyBlocks": {
              "type": "boolean",
              "default": true
            },
            "AllowUnusedKeywordArguments": {
              "type": "boolean",
              "default": false
            }
          }
        }
      ]
    },
    "Lint/UnusedMethodArgument": {
      "title": "Lint/UnusedMethodArgument",
      "description": "Checks for unused method arguments.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            },
            "AllowUnusedKeywordArguments": {
              "type": "boolean",
              "default": false
            },
            "IgnoreEmptyMethods": {
              "type": "boolean",
              "default": true
            },
            "IgnoreNotImplementedMethods": {
              "type": "boolean",
              "default": true
            },
            "NotImplementedExceptions": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "NotImplementedError"
              ]
            }
          }
        }
      ]
    },
    "Lint/UriEscapeUnescape": {
      "title": "Lint/UriEscapeUnescape",
      "description": "`URI.escape` method is obsolete and should not be used. Instead, use `CGI.escape`, `URI.encode_www_form` or `URI.encode_www_form_component` depending on your specific use case. Also `URI.unescape` method is obsolete and should not be used. Instead, use `CGI.unescape`, `URI.decode_www_form` or `URI.decode_www_form_component` depending on your specific use case.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            }
          }
        }
      ]
    },
    "Lint/UriRegexp": {
      "title": "Lint/UriRegexp",
      "description": "Use `URI::DEFAULT_PARSER.make_regexp` instead of `URI.regexp`.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/UselessAccessModifier": {
      "title": "Lint/UselessAccessModifier",
      "description": "Checks for useless access modifiers.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            },
            "ContextCreatingMethods": {
              "type": "array",
              "items": {},
              "default": []
            },
            "MethodCreatingMethods": {
              "type": "array",
              "items": {},
              "default": []
            }
          }
        }
      ]
    },
    "Lint/UselessAssignment": {
      "title": "Lint/UselessAssignment",
      "description": "Checks for useless assignment to a local variable.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/UselessConstantScoping": {
      "title": "Lint/UselessConstantScoping",
      "description": "Checks for useless constant scoping.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            }
          }
        }
      ]
    },
    "Lint/UselessDefaultValueArgument": {
      "title": "Lint/UselessDefaultValueArgument",
      "description": "Checks for usage of `fetch` or `Array.new` with default value argument and block.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AllowedReceivers": {
              "type": "array",
              "items": {},
              "default": []
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/UselessDefined": {
      "title": "Lint/UselessDefined",
      "description": "Checks for calls to `defined?` with strings and symbols. The result of such a call will always be truthy.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            }
          }
        }
      ]
    },
    "Lint/UselessElseWithoutRescue": {
      "title": "Lint/UselessElseWithoutRescue",
      "description": "Checks for useless `else` in `begin..end` without `rescue`.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            }
          }
        }
      ]
    },
    "Lint/UselessMethodDefinition": {
      "title": "Lint/UselessMethodDefinition",
      "description": "Checks for useless method definitions.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/UselessNumericOperation": {
      "title": "Lint/UselessNumericOperation",
      "description": "Checks for useless numeric operations.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/UselessOr": {
      "title": "Lint/UselessOr",
      "description": "Checks for useless OR expressions.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            }
          }
        }
      ]
    },
    "Lint/UselessRescue": {
      "title": "Lint/UselessRescue",
      "description": "Checks for useless `rescue`s.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            }
          }
        }
      ]
    },
    "Lint/UselessRuby2Keywords": {
      "title": "Lint/UselessRuby2Keywords",
      "description": "Finds unnecessary uses of `ruby2_keywords`.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            }
          }
        }
      ]
    },
    "Lint/UselessSetterCall": {
      "title": "Lint/UselessSetterCall",
      "description": "Checks for useless setter call to a local variable.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/UselessTimes": {
      "title": "Lint/UselessTimes",
      "description": "Checks for useless `Integer#times` calls.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Lint/Void": {
      "title": "Lint/Void",
      "description": "Possible use of operator/literal/variable in void context.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            },
            "CheckForMethodsWithNoSideEffects": {
              "type": "boolean",
              "default": false
            }
          }
        }
      ]
    },
    "Metrics/CyclomaticComplexity": {
      "title": "Metrics/CyclomaticComplexity",
      "description": "A complexity metric that is strongly correlated to the number of test cases needed to validate a method.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AllowedMethods": {
              "type": "array",
              "items": {},
              "default": []
            },
            "AllowedPatterns": {
              "type": "array",
              "default": []
            },
            "Max": {
              "type": "integer",
              "default": 7
            }
          }
        }
      ]
    },
    "Metrics/AbcSize": {
      "title": "Metrics/AbcSize",
      "description": "A calculated magnitude based on number of assignments, branches, and conditions.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "References": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "http://c2.com/cgi/wiki?AbcMetric",
                "https://en.wikipedia.org/wiki/ABC_Software_Metric"
              ]
            },
            "Enabled": {
              "default": true
            },
            "AllowedMethods": {
              "type": "array",
              "items": {},
              "default": []
            },
            "AllowedPatterns": {
              "type": "array",
              "default": []
            },
            "CountRepeatedAttributes": {
              "type": "boolean",
              "default": true
            },
            "Max": {
              "type": "integer",
              "default": 17
            }
          }
        }
      ]
    },
    "Metrics/BlockLength": {
      "title": "Metrics/BlockLength",
      "description": "Avoid long blocks with many lines.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "CountComments": {
              "type": "boolean",
              "default": false
            },
            "Max": {
              "type": "integer",
              "default": 25
            },
            "CountAsOne": {
              "type": "array",
              "items": {},
              "default": []
            },
            "AllowedMethods": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "refine"
              ]
            },
            "AllowedPatterns": {
              "type": "array",
              "default": []
            },
            "Exclude": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "Metrics/BlockNesting": {
      "title": "Metrics/BlockNesting",
      "description": "Avoid excessive block nesting.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "CountBlocks": {
              "type": "boolean",
              "default": false
            },
            "CountModifierForms": {
              "type": "boolean",
              "default": false
            },
            "Max": {
              "type": "integer",
              "default": 3
            }
          }
        }
      ]
    },
    "Metrics/ClassLength": {
      "title": "Metrics/ClassLength",
      "description": "Avoid classes longer than 100 lines of code.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "CountComments": {
              "type": "boolean",
              "default": false
            },
            "Max": {
              "type": "integer",
              "default": 100
            },
            "CountAsOne": {
              "type": "array",
              "items": {},
              "default": []
            }
          }
        }
      ]
    },
    "Metrics/CollectionLiteralLength": {
      "title": "Metrics/CollectionLiteralLength",
      "description": "Checks for `Array` or `Hash` literals with many entries.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "LengthThreshold": {
              "type": "integer",
              "default": 250
            }
          }
        }
      ]
    },
    "Metrics/MethodLength": {
      "title": "Metrics/MethodLength",
      "description": "Avoid methods longer than 10 lines of code.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "CountComments": {
              "type": "boolean",
              "default": false
            },
            "Max": {
              "type": "integer",
              "default": 10
            },
            "CountAsOne": {
              "type": "array",
              "items": {},
              "default": []
            },
            "AllowedMethods": {
              "type": "array",
              "items": {},
              "default": []
            },
            "AllowedPatterns": {
              "type": "array",
              "default": []
            }
          }
        }
      ]
    },
    "Metrics/ModuleLength": {
      "title": "Metrics/ModuleLength",
      "description": "Avoid modules longer than 100 lines of code.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "CountComments": {
              "type": "boolean",
              "default": false
            },
            "Max": {
              "type": "integer",
              "default": 100
            },
            "CountAsOne": {
              "type": "array",
              "items": {},
              "default": []
            }
          }
        }
      ]
    },
    "Metrics/ParameterLists": {
      "title": "Metrics/ParameterLists",
      "description": "Avoid parameter lists longer than three or four parameters.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "Max": {
              "type": "integer",
              "default": 5
            },
            "CountKeywordArgs": {
              "type": "boolean",
              "default": true
            },
            "MaxOptionalParameters": {
              "type": "integer",
              "default": 3
            }
          }
        }
      ]
    },
    "Metrics/PerceivedComplexity": {
      "title": "Metrics/PerceivedComplexity",
      "description": "A complexity metric geared towards measuring complexity for a human reader.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AllowedMethods": {
              "type": "array",
              "items": {},
              "default": []
            },
            "AllowedPatterns": {
              "type": "array",
              "default": []
            },
            "Max": {
              "type": "integer",
              "default": 8
            }
          }
        }
      ]
    },
    "Naming/AccessorMethodName": {
      "title": "Naming/AccessorMethodName",
      "description": "Check the naming of accessor methods for get_/set_.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            }
          }
        }
      ]
    },
    "Naming/AsciiIdentifiers": {
      "title": "Naming/AsciiIdentifiers",
      "description": "Use only ascii symbols in identifiers and constants.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AsciiConstants": {
              "type": "boolean",
              "default": true
            }
          }
        }
      ]
    },
    "Naming/BlockForwarding": {
      "title": "Naming/BlockForwarding",
      "description": "Use anonymous block forwarding.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "anonymous",
                    "explicit"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "anonymous",
                      "explicit"
                    ]
                  }
                }
              ],
              "default": "anonymous"
            },
            "BlockForwardingName": {
              "type": "string",
              "default": "block"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Naming/BlockParameterName": {
      "title": "Naming/BlockParameterName",
      "description": "Checks for block parameter names that contain capital letters, end in numbers, or do not meet a minimal length.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "MinNameLength": {
              "type": "integer",
              "default": 1
            },
            "AllowNamesEndingInNumbers": {
              "type": "boolean",
              "default": true
            },
            "AllowedNames": {
              "type": "array",
              "items": {},
              "default": []
            },
            "ForbiddenNames": {
              "type": "array",
              "items": {},
              "default": []
            }
          }
        }
      ]
    },
    "Naming/ClassAndModuleCamelCase": {
      "title": "Naming/ClassAndModuleCamelCase",
      "description": "Use CamelCase for classes and modules.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AllowedNames": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "module_parent"
              ]
            }
          }
        }
      ]
    },
    "Naming/ConstantName": {
      "title": "Naming/ConstantName",
      "description": "Constants should use SCREAMING_SNAKE_CASE.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            }
          }
        }
      ]
    },
    "Naming/FileName": {
      "title": "Naming/FileName",
      "description": "Use snake_case for source file names.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "Exclude": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "ExpectMatchingDefinition": {
              "type": "boolean",
              "default": false
            },
            "CheckDefinitionPathHierarchy": {
              "type": "boolean",
              "default": true
            },
            "CheckDefinitionPathHierarchyRoots": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "lib",
                "spec",
                "test",
                "src"
              ]
            },
            "Regex": {},
            "IgnoreExecutableScripts": {
              "type": "boolean",
              "default": true
            },
            "AllowedAcronyms": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "CLI",
                "DSL",
                "ACL",
                "API",
                "ASCII",
                "CPU",
                "CSS",
                "DNS",
                "EOF",
                "GUID",
                "HTML",
                "HTTP",
                "HTTPS",
                "ID",
                "IP",
                "JSON",
                "LHS",
                "QPS",
                "RAM",
                "RHS",
                "RPC",
                "SLA",
                "SMTP",
                "SQL",
                "SSH",
                "TCP",
                "TLS",
                "TTL",
                "UDP",
                "UI",
                "UID",
                "UUID",
                "URI",
                "URL",
                "UTF8",
                "VM",
                "XML",
                "XMPP",
                "XSRF",
                "XSS"
              ]
            }
          }
        }
      ]
    },
    "Naming/HeredocDelimiterCase": {
      "title": "Naming/HeredocDelimiterCase",
      "description": "Use configured case for heredoc delimiters.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "lowercase",
                    "uppercase"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "lowercase",
                      "uppercase"
                    ]
                  }
                }
              ],
              "default": "uppercase"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Naming/HeredocDelimiterNaming": {
      "title": "Naming/HeredocDelimiterNaming",
      "description": "Use descriptive heredoc delimiters.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "ForbiddenDelimiters": {
              "type": "array",
              "items": {},
              "default": [
                "(?i-mx:(^|\\s)(EO[A-Z]{1}|END)(\\s|$))"
              ]
            }
          }
        }
      ]
    },
    "Naming/InclusiveLanguage": {
      "title": "Naming/InclusiveLanguage",
      "description": "Recommend the use of inclusive language instead of problematic terms.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": false
            },
            "CheckIdentifiers": {
              "type": "boolean",
              "default": true
            },
            "CheckConstants": {
              "type": "boolean",
              "default": true
            },
            "CheckVariables": {
              "type": "boolean",
              "default": true
            },
            "CheckStrings": {
              "type": "boolean",
              "default": false
            },
            "CheckSymbols": {
              "type": "boolean",
              "default": true
            },
            "CheckComments": {
              "type": "boolean",
              "default": true
            },
            "CheckFilepaths": {
              "type": "boolean",
              "default": true
            },
            "FlaggedTerms": {
              "type": "object",
              "default": {
                "whitelist": {
                  "Regex": "(?-mix:white[-_\\s]?list)",
                  "Suggestions": [
                    "allowlist",
                    "permit"
                  ]
                },
                "blacklist": {
                  "Regex": "(?-mix:black[-_\\s]?list)",
                  "Suggestions": [
                    "denylist",
                    "block"
                  ]
                },
                "slave": {
                  "WholeWord": true,
                  "Suggestions": [
                    "replica",
                    "secondary",
                    "follower"
                  ]
                }
              }
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Naming/MemoizedInstanceVariableName": {
      "title": "Naming/MemoizedInstanceVariableName",
      "description": "Memoized method name should match memo instance variable name.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyleForLeadingUnderscores": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "disallowed",
                    "required",
                    "optional"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "disallowed",
                      "required",
                      "optional"
                    ]
                  }
                }
              ],
              "default": "disallowed"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Naming/MethodName": {
      "title": "Naming/MethodName",
      "description": "Use the configured style when naming methods.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "snake_case",
                    "camelCase"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "snake_case",
                      "camelCase"
                    ]
                  }
                }
              ],
              "default": "snake_case"
            },
            "AllowedPatterns": {
              "type": "array",
              "default": []
            },
            "ForbiddenIdentifiers": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "__id__",
                "__send__"
              ]
            },
            "ForbiddenPatterns": {
              "type": "array",
              "items": {},
              "default": []
            }
          }
        }
      ]
    },
    "Naming/MethodParameterName": {
      "title": "Naming/MethodParameterName",
      "description": "Checks for method parameter names that contain capital letters, end in numbers, or do not meet a minimal length.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "MinNameLength": {
              "type": "integer",
              "default": 3
            },
            "AllowNamesEndingInNumbers": {
              "type": "boolean",
              "default": true
            },
            "AllowedNames": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "as",
                "at",
                "by",
                "cc",
                "db",
                "id",
                "if",
                "in",
                "io",
                "ip",
                "of",
                "on",
                "os",
                "pp",
                "to"
              ]
            },
            "ForbiddenNames": {
              "type": "array",
              "items": {},
              "default": []
            }
          }
        }
      ]
    },
    "Naming/BinaryOperatorParameterName": {
      "title": "Naming/BinaryOperatorParameterName",
      "description": "When defining binary operators, name the argument other.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Naming/PredicateMethod": {
      "title": "Naming/PredicateMethod",
      "description": "Checks that predicate methods end with `?` and non-predicate methods do not.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "Mode": {
              "type": "string",
              "default": "conservative"
            },
            "AllowedMethods": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "call"
              ]
            }
          }
        }
      ]
    },
    "Naming/PredicatePrefix": {
      "title": "Naming/PredicatePrefix",
      "description": "Predicate method names should not be prefixed and end with a `?`.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "NamePrefix": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "is_",
                "has_",
                "have_",
                "does_"
              ]
            },
            "ForbiddenPrefixes": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "is_",
                "has_",
                "have_",
                "does_"
              ]
            },
            "AllowedMethods": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "is_a?"
              ]
            },
            "MethodDefinitionMacros": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "define_method",
                "define_singleton_method"
              ]
            },
            "UseSorbetSigs": {
              "type": "boolean",
              "default": false
            },
            "Exclude": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "Naming/RescuedExceptionsVariableName": {
      "title": "Naming/RescuedExceptionsVariableName",
      "description": "Use consistent rescued exceptions variables naming.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "PreferredName": {
              "type": "string",
              "default": "e"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Naming/VariableName": {
      "title": "Naming/VariableName",
      "description": "Use the configured style when naming variables.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "snake_case",
                    "camelCase"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "snake_case",
                      "camelCase"
                    ]
                  }
                }
              ],
              "default": "snake_case"
            },
            "AllowedIdentifiers": {
              "type": "array",
              "items": {},
              "default": []
            },
            "AllowedPatterns": {
              "type": "array",
              "default": []
            },
            "ForbiddenIdentifiers": {
              "type": "array",
              "items": {},
              "default": []
            },
            "ForbiddenPatterns": {
              "type": "array",
              "items": {},
              "default": []
            }
          }
        }
      ]
    },
    "Naming/VariableNumber": {
      "title": "Naming/VariableNumber",
      "description": "Use the configured style when numbering symbols, methods and variables.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "snake_case",
                    "normalcase",
                    "non_integer"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "snake_case",
                      "normalcase",
                      "non_integer"
                    ]
                  }
                }
              ],
              "default": "normalcase"
            },
            "CheckMethodNames": {
              "type": "boolean",
              "default": true
            },
            "CheckSymbols": {
              "type": "boolean",
              "default": true
            },
            "AllowedIdentifiers": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "TLS1_1",
                "TLS1_2",
                "capture3",
                "iso8601",
                "rfc1123_date",
                "rfc822",
                "rfc2822",
                "rfc3339",
                "x86_64"
              ]
            },
            "AllowedPatterns": {
              "type": "array",
              "default": []
            }
          }
        }
      ]
    },
    "Style/AccessModifierDeclarations": {
      "title": "Style/AccessModifierDeclarations",
      "description": "Checks style of how access modifiers are used.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "inline",
                    "group"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "inline",
                      "group"
                    ]
                  }
                }
              ],
              "default": "group"
            },
            "AllowModifiersOnSymbols": {
              "type": "boolean",
              "default": true
            },
            "AllowModifiersOnAttrs": {
              "type": "boolean",
              "default": true
            },
            "AllowModifiersOnAliasMethod": {
              "type": "boolean",
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/AccessorGrouping": {
      "title": "Style/AccessorGrouping",
      "description": "Checks for grouping of accessors in `class` and `module` bodies.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "separated",
                    "grouped"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "separated",
                      "grouped"
                    ]
                  }
                }
              ],
              "default": "grouped"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/Alias": {
      "title": "Style/Alias",
      "description": "Use alias instead of alias_method.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "prefer_alias",
                    "prefer_alias_method"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "prefer_alias",
                      "prefer_alias_method"
                    ]
                  }
                }
              ],
              "default": "prefer_alias"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/AmbiguousEndlessMethodDefinition": {
      "title": "Style/AmbiguousEndlessMethodDefinition",
      "description": "Checks for endless methods inside operators of lower precedence.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/AndOr": {
      "title": "Style/AndOr",
      "description": "Use &&/|| instead of and/or.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "always",
                    "conditionals"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "always",
                      "conditionals"
                    ]
                  }
                }
              ],
              "default": "conditionals"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/ArgumentsForwarding": {
      "title": "Style/ArgumentsForwarding",
      "description": "Use arguments forwarding.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AllowOnlyRestArgument": {
              "type": "boolean",
              "default": true
            },
            "UseAnonymousForwarding": {
              "type": "boolean",
              "default": true
            },
            "RedundantRestArgumentNames": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "args",
                "arguments"
              ]
            },
            "RedundantKeywordRestArgumentNames": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "kwargs",
                "options",
                "opts"
              ]
            },
            "RedundantBlockArgumentNames": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "blk",
                "block",
                "proc"
              ]
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/ArrayCoercion": {
      "title": "Style/ArrayCoercion",
      "description": "Use Array() instead of explicit Array check or [*var], when dealing with a variable you want to treat as an Array, but you're not certain it's an array.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": false
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/ArrayFirstLast": {
      "title": "Style/ArrayFirstLast",
      "description": "Use `arr.first` and `arr.last` instead of `arr[0]` and `arr[-1]`.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "References": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "#first-and-last"
              ]
            },
            "Enabled": {
              "default": false
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/ArrayIntersect": {
      "title": "Style/ArrayIntersect",
      "description": "Use `array1.intersect?(array2)` instead of `(array1 & array2).any?`.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/ArrayJoin": {
      "title": "Style/ArrayJoin",
      "description": "Use Array#join instead of Array#*.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/AsciiComments": {
      "title": "Style/AsciiComments",
      "description": "Use only ascii symbols in comments.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": false
            },
            "AllowedChars": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "©"
              ]
            }
          }
        }
      ]
    },
    "Style/Attr": {
      "title": "Style/Attr",
      "description": "Checks for uses of Module#attr.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/AutoResourceCleanup": {
      "title": "Style/AutoResourceCleanup",
      "description": "Suggests the usage of an auto resource cleanup version of a method (if available).",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": false
            }
          }
        }
      ]
    },
    "Style/BarePercentLiterals": {
      "title": "Style/BarePercentLiterals",
      "description": "Checks if usage of %() or %Q() matches configuration.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "percent_q",
                    "bare_percent"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "percent_q",
                      "bare_percent"
                    ]
                  }
                }
              ],
              "default": "bare_percent"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/BeginBlock": {
      "title": "Style/BeginBlock",
      "description": "Avoid the use of BEGIN blocks.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            }
          }
        }
      ]
    },
    "Style/BisectedAttrAccessor": {
      "title": "Style/BisectedAttrAccessor",
      "description": "Checks for places where `attr_reader` and `attr_writer` for the same method can be combined into single `attr_accessor`.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/BitwisePredicate": {
      "title": "Style/BitwisePredicate",
      "description": "Prefer bitwise predicate methods over direct comparison operations.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/BlockComments": {
      "title": "Style/BlockComments",
      "description": "Do not use block comments.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/BlockDelimiters": {
      "title": "Style/BlockDelimiters",
      "description": "Avoid using {...} for multi-line blocks (multiline chaining is always ugly). Prefer {...} over do...end for single-line blocks.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "line_count_based",
                    "semantic",
                    "braces_for_chaining",
                    "always_braces"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "line_count_based",
                      "semantic",
                      "braces_for_chaining",
                      "always_braces"
                    ]
                  }
                }
              ],
              "default": "line_count_based"
            },
            "ProceduralMethods": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "benchmark",
                "bm",
                "bmbm",
                "create",
                "each_with_object",
                "measure",
                "new",
                "realtime",
                "tap",
                "with_object"
              ]
            },
            "FunctionalMethods": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "let",
                "let!",
                "subject",
                "watch"
              ]
            },
            "AllowedMethods": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "lambda",
                "proc",
                "it"
              ]
            },
            "AllowedPatterns": {
              "type": "array",
              "default": []
            },
            "AllowBracesOnProceduralOneLiners": {
              "type": "boolean",
              "default": false
            },
            "BracesRequiredMethods": {
              "type": "array",
              "items": {},
              "default": []
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/CaseEquality": {
      "title": "Style/CaseEquality",
      "description": "Avoid explicit use of the case equality operator(===).",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AllowOnConstant": {
              "type": "boolean",
              "default": false
            },
            "AllowOnSelfClass": {
              "type": "boolean",
              "default": false
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/CaseLikeIf": {
      "title": "Style/CaseLikeIf",
      "description": "Identifies places where `if-elsif` constructions can be replaced with `case-when`.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "MinBranchesCount": {
              "type": "integer",
              "default": 3
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/CharacterLiteral": {
      "title": "Style/CharacterLiteral",
      "description": "Checks for uses of character literals.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/ClassAndModuleChildren": {
      "title": "Style/ClassAndModuleChildren",
      "description": "Checks style of children classes and modules.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "nested",
                    "compact"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "nested",
                      "compact"
                    ]
                  }
                }
              ],
              "default": "nested"
            },
            "EnforcedStyleForClasses": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    null,
                    "nested",
                    "compact"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      null,
                      "nested",
                      "compact"
                    ]
                  }
                }
              ]
            },
            "EnforcedStyleForModules": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    null,
                    "nested",
                    "compact"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      null,
                      "nested",
                      "compact"
                    ]
                  }
                }
              ]
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/ClassCheck": {
      "title": "Style/ClassCheck",
      "description": "Enforces consistent use of `Object#is_a?` or `Object#kind_of?`.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "is_a?",
                    "kind_of?"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "is_a?",
                      "kind_of?"
                    ]
                  }
                }
              ],
              "default": "is_a?"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/ClassEqualityComparison": {
      "title": "Style/ClassEqualityComparison",
      "description": "Enforces the use of `Object#instance_of?` instead of class comparison for equality.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AllowedMethods": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "==",
                "equal?",
                "eql?"
              ]
            },
            "AllowedPatterns": {
              "type": "array",
              "default": []
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/ClassMethods": {
      "title": "Style/ClassMethods",
      "description": "Use self when defining module/class methods.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/ClassMethodsDefinitions": {
      "title": "Style/ClassMethodsDefinitions",
      "description": "Enforces using `def self.method_name` or `class << self` to define class methods.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": false
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "def_self",
                    "self_class"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "def_self",
                      "self_class"
                    ]
                  }
                }
              ],
              "default": "def_self"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/ClassVars": {
      "title": "Style/ClassVars",
      "description": "Avoid the use of class variables.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            }
          }
        }
      ]
    },
    "Style/CollectionCompact": {
      "title": "Style/CollectionCompact",
      "description": "Use `{Array,Hash}#{compact,compact!}` instead of custom logic to reject nils.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AllowedReceivers": {
              "type": "array",
              "items": {},
              "default": []
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/CollectionMethods": {
      "title": "Style/CollectionMethods",
      "description": "Preferred collection methods.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": false
            },
            "PreferredMethods": {
              "type": "object",
              "default": {
                "collect": "map",
                "collect!": "map!",
                "collect_concat": "flat_map",
                "inject": "reduce",
                "detect": "find",
                "find_all": "select",
                "member?": "include?"
              }
            },
            "MethodsAcceptingSymbol": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "inject",
                "reduce"
              ]
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/ColonMethodCall": {
      "title": "Style/ColonMethodCall",
      "description": "Do not use :: for method call.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/ColonMethodDefinition": {
      "title": "Style/ColonMethodDefinition",
      "description": "Do not use :: for defining class methods.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/CombinableDefined": {
      "title": "Style/CombinableDefined",
      "description": "Checks successive `defined?` calls that can be combined into a single call.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/CombinableLoops": {
      "title": "Style/CombinableLoops",
      "description": "Checks for places where multiple consecutive loops over the same data can be combined into a single loop.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/CommandLiteral": {
      "title": "Style/CommandLiteral",
      "description": "Use `` or %x around command literals.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "backticks",
                    "percent_x",
                    "mixed"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "backticks",
                      "percent_x",
                      "mixed"
                    ]
                  }
                }
              ],
              "default": "backticks"
            },
            "AllowInnerBackticks": {
              "type": "boolean",
              "default": false
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/CommentAnnotation": {
      "title": "Style/CommentAnnotation",
      "description": "Checks formatting of special comments (TODO, FIXME, OPTIMIZE, HACK, REVIEW, NOTE).",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "Keywords": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "TODO",
                "FIXME",
                "OPTIMIZE",
                "HACK",
                "REVIEW",
                "NOTE"
              ]
            },
            "RequireColon": {
              "type": "boolean",
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/CommentedKeyword": {
      "title": "Style/CommentedKeyword",
      "description": "Do not place comments on the same line as certain keywords.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/ComparableBetween": {
      "title": "Style/ComparableBetween",
      "description": "Enforces the use of `Comparable#between?` instead of logical comparison.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/ComparableClamp": {
      "title": "Style/ComparableClamp",
      "description": "Enforces the use of `Comparable#clamp` instead of comparison by minimum and maximum.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/ConcatArrayLiterals": {
      "title": "Style/ConcatArrayLiterals",
      "description": "Enforces the use of `Array#push(item)` instead of `Array#concat([item])` to avoid redundant array literals.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/ConditionalAssignment": {
      "title": "Style/ConditionalAssignment",
      "description": "Use the return value of `if` and `case` statements for assignment to a variable and variable comparison instead of assigning that variable inside of each branch.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "assign_to_condition",
                    "assign_inside_condition"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "assign_to_condition",
                      "assign_inside_condition"
                    ]
                  }
                }
              ],
              "default": "assign_to_condition"
            },
            "SingleLineConditionsOnly": {
              "type": "boolean",
              "default": true
            },
            "IncludeTernaryExpressions": {
              "type": "boolean",
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/ConstantVisibility": {
      "title": "Style/ConstantVisibility",
      "description": "Check that class- and module constants have visibility declarations.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": false
            },
            "IgnoreModules": {
              "type": "boolean",
              "default": false
            }
          }
        }
      ]
    },
    "Style/Copyright": {
      "title": "Style/Copyright",
      "description": "Include a copyright notice in each file before any code.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": false
            },
            "Notice": {
              "type": "string",
              "default": "^Copyright (\\(c\\) )?2[0-9]{3} .+"
            },
            "AutocorrectNotice": {
              "type": "string",
              "default": ""
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/DataInheritance": {
      "title": "Style/DataInheritance",
      "description": "Checks for inheritance from Data.define.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/DateTime": {
      "title": "Style/DateTime",
      "description": "Use Time over DateTime.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": false
            },
            "AllowCoercion": {
              "type": "boolean",
              "default": false
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/DefWithParentheses": {
      "title": "Style/DefWithParentheses",
      "description": "Use def with parentheses when there are arguments.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/DigChain": {
      "title": "Style/DigChain",
      "description": "Use `dig` with multiple parameters instead of chaining multiple calls.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/Dir": {
      "title": "Style/Dir",
      "description": "Use the `__dir__` method to retrieve the canonicalized absolute path to the current file.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/DirEmpty": {
      "title": "Style/DirEmpty",
      "description": "Prefer to use `Dir.empty?('path/to/dir')` when checking if a directory is empty.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/DisableCopsWithinSourceCodeDirective": {
      "title": "Style/DisableCopsWithinSourceCodeDirective",
      "description": "Forbids disabling/enabling cops within source code.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": false
            },
            "AllowedCops": {
              "type": "array",
              "items": {},
              "default": []
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/DocumentationMethod": {
      "title": "Style/DocumentationMethod",
      "description": "Checks for missing documentation comment for public methods.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": false
            },
            "AllowedMethods": {
              "type": "array",
              "items": {},
              "default": []
            },
            "Exclude": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "RequireForNonPublicMethods": {
              "type": "boolean",
              "default": false
            }
          }
        }
      ]
    },
    "Style/Documentation": {
      "title": "Style/Documentation",
      "description": "Document classes and non-namespace modules.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AllowedConstants": {
              "type": "array",
              "items": {},
              "default": []
            },
            "Exclude": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "Style/DocumentDynamicEvalDefinition": {
      "title": "Style/DocumentDynamicEvalDefinition",
      "description": "When using `class_eval` (or other `eval`) with string interpolation, add a comment block showing its appearance if interpolated.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            }
          }
        }
      ]
    },
    "Style/DoubleCopDisableDirective": {
      "title": "Style/DoubleCopDisableDirective",
      "description": "Checks for double rubocop:disable comments on a single line.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/DoubleNegation": {
      "title": "Style/DoubleNegation",
      "description": "Checks for uses of double negation (!!).",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "allowed_in_returns",
                    "forbidden"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "allowed_in_returns",
                      "forbidden"
                    ]
                  }
                }
              ],
              "default": "allowed_in_returns"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/EachForSimpleLoop": {
      "title": "Style/EachForSimpleLoop",
      "description": "Use `Integer#times` for a simple loop which iterates a fixed number of times.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/EachWithObject": {
      "title": "Style/EachWithObject",
      "description": "Prefer `each_with_object` over `inject` or `reduce`.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/EmptyBlockParameter": {
      "title": "Style/EmptyBlockParameter",
      "description": "Omit pipes for empty block parameters.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/EmptyCaseCondition": {
      "title": "Style/EmptyCaseCondition",
      "description": "Avoid empty condition in case statements.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/EmptyElse": {
      "title": "Style/EmptyElse",
      "description": "Avoid empty else-clauses.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "empty",
                    "nil",
                    "both"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "empty",
                      "nil",
                      "both"
                    ]
                  }
                }
              ],
              "default": "both"
            },
            "AllowComments": {
              "type": "boolean",
              "default": false
            }
          }
        }
      ]
    },
    "Style/EmptyHeredoc": {
      "title": "Style/EmptyHeredoc",
      "description": "Checks for using empty heredoc to reduce redundancy.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/EmptyLambdaParameter": {
      "title": "Style/EmptyLambdaParameter",
      "description": "Omit parens for empty lambda parameters.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/EmptyLiteral": {
      "title": "Style/EmptyLiteral",
      "description": "Prefer literals to Array.new/Hash.new/String.new.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/EmptyMethod": {
      "title": "Style/EmptyMethod",
      "description": "Checks the formatting of empty method definitions.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "compact",
                    "expanded"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "compact",
                      "expanded"
                    ]
                  }
                }
              ],
              "default": "compact"
            }
          }
        }
      ]
    },
    "Style/EmptyStringInsideInterpolation": {
      "title": "Style/EmptyStringInsideInterpolation",
      "description": "Checks for empty strings being assigned inside string interpolation.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "trailing_conditional",
                    "ternary"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "trailing_conditional",
                      "ternary"
                    ]
                  }
                }
              ],
              "default": "trailing_conditional"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/EndlessMethod": {
      "title": "Style/EndlessMethod",
      "description": "Avoid the use of multi-lined endless method definitions.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "allow_single_line",
                    "allow_always",
                    "disallow",
                    "require_single_line",
                    "require_always"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "allow_single_line",
                      "allow_always",
                      "disallow",
                      "require_single_line",
                      "require_always"
                    ]
                  }
                }
              ],
              "default": "allow_single_line"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/Encoding": {
      "title": "Style/Encoding",
      "description": "Use UTF-8 as the source file encoding.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/EndBlock": {
      "title": "Style/EndBlock",
      "description": "Avoid the use of END blocks.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/EnvHome": {
      "title": "Style/EnvHome",
      "description": "Checks for consistent usage of `ENV['HOME']`.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/EvalWithLocation": {
      "title": "Style/EvalWithLocation",
      "description": "Pass `__FILE__` and `__LINE__` to `eval` method, as they are used by backtraces.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/EvenOdd": {
      "title": "Style/EvenOdd",
      "description": "Favor the use of `Integer#even?` && `Integer#odd?`.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/ExactRegexpMatch": {
      "title": "Style/ExactRegexpMatch",
      "description": "Checks for exact regexp match inside Regexp literals.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/ExpandPathArguments": {
      "title": "Style/ExpandPathArguments",
      "description": "Use `expand_path(__dir__)` instead of `expand_path('..', __FILE__)`.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/ExplicitBlockArgument": {
      "title": "Style/ExplicitBlockArgument",
      "description": "Consider using explicit block argument to avoid writing block literal that just passes its arguments to another block.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/ExponentialNotation": {
      "title": "Style/ExponentialNotation",
      "description": "When using exponential notation, favor a mantissa between 1 (inclusive) and 10 (exclusive).",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "scientific",
                    "engineering",
                    "integral"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "scientific",
                      "engineering",
                      "integral"
                    ]
                  }
                }
              ],
              "default": "scientific"
            }
          }
        }
      ]
    },
    "Style/FetchEnvVar": {
      "title": "Style/FetchEnvVar",
      "description": "Suggests `ENV.fetch` for the replacement of `ENV[]`.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "References": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "https://rubystyle.guide/#hash-fetch-defaults"
              ]
            },
            "Enabled": {
              "default": "pending"
            },
            "AllowedVars": {
              "type": "array",
              "items": {},
              "default": []
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/FileEmpty": {
      "title": "Style/FileEmpty",
      "description": "Prefer to use `File.empty?('path/to/file')` when checking if a file is empty.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/FileNull": {
      "title": "Style/FileNull",
      "description": "Use `File::NULL` instead of hardcoding \"dev/null\".",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/FileRead": {
      "title": "Style/FileRead",
      "description": "Favor `File.(bin)read` convenience methods.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/FileTouch": {
      "title": "Style/FileTouch",
      "description": "Favor `FileUtils.touch` for touching files.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/FileWrite": {
      "title": "Style/FileWrite",
      "description": "Favor `File.(bin)write` convenience methods.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/FloatDivision": {
      "title": "Style/FloatDivision",
      "description": "For performing float division, coerce one side only.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "References": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "https://blog.rubystyle.guide/ruby/2019/06/21/float-division.html"
              ]
            },
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "left_coerce",
                    "right_coerce",
                    "single_coerce",
                    "fdiv"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "left_coerce",
                      "right_coerce",
                      "single_coerce",
                      "fdiv"
                    ]
                  }
                }
              ],
              "default": "single_coerce"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/For": {
      "title": "Style/For",
      "description": "Checks use of for or each in multiline loops.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "each",
                    "for"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "each",
                      "for"
                    ]
                  }
                }
              ],
              "default": "each"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/FormatString": {
      "title": "Style/FormatString",
      "description": "Enforce the use of Kernel#sprintf, Kernel#format or String#%.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "format",
                    "sprintf",
                    "percent"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "format",
                      "sprintf",
                      "percent"
                    ]
                  }
                }
              ],
              "default": "format"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/FormatStringToken": {
      "title": "Style/FormatStringToken",
      "description": "Use a consistent style for format string tokens.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "annotated",
                    "template",
                    "unannotated"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "annotated",
                      "template",
                      "unannotated"
                    ]
                  }
                }
              ],
              "default": "annotated"
            },
            "MaxUnannotatedPlaceholdersAllowed": {
              "type": "integer",
              "default": 1
            },
            "Mode": {
              "type": "string",
              "default": "aggressive"
            },
            "AllowedMethods": {
              "type": "array",
              "items": {},
              "default": []
            },
            "AllowedPatterns": {
              "type": "array",
              "default": []
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/FrozenStringLiteralComment": {
      "title": "Style/FrozenStringLiteralComment",
      "description": "Add the frozen_string_literal comment to the top of files to help transition to frozen string literals by default.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "always",
                    "always_true",
                    "never"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "always",
                      "always_true",
                      "never"
                    ]
                  }
                }
              ],
              "default": "always"
            },
            "Exclude": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/GlobalStdStream": {
      "title": "Style/GlobalStdStream",
      "description": "Enforces the use of `$stdout/$stderr/$stdin` instead of `STDOUT/STDERR/STDIN`.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/GlobalVars": {
      "title": "Style/GlobalVars",
      "description": "Do not introduce global variables.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "References": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "https://www.zenspider.com/ruby/quickref.html"
              ]
            },
            "Enabled": {
              "default": true
            },
            "AllowedVariables": {
              "type": "array",
              "items": {},
              "default": []
            }
          }
        }
      ]
    },
    "Style/GuardClause": {
      "title": "Style/GuardClause",
      "description": "Check for conditionals that can be replaced with guard clauses.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "MinBodyLength": {
              "type": "integer",
              "default": 1
            },
            "AllowConsecutiveConditionals": {
              "type": "boolean",
              "default": false
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/HashAsLastArrayItem": {
      "title": "Style/HashAsLastArrayItem",
      "description": "Checks for presence or absence of braces around hash literal as a last array item depending on configuration.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "braces",
                    "no_braces"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "braces",
                      "no_braces"
                    ]
                  }
                }
              ],
              "default": "braces"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/HashConversion": {
      "title": "Style/HashConversion",
      "description": "Avoid Hash[] in favor of ary.to_h or literal hashes.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AllowSplatArgument": {
              "type": "boolean",
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/HashEachMethods": {
      "title": "Style/HashEachMethods",
      "description": "Use Hash#each_key and Hash#each_value.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AllowedReceivers": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "Thread.current"
              ]
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/HashExcept": {
      "title": "Style/HashExcept",
      "description": "Checks for usages of `Hash#reject`, `Hash#select`, and `Hash#filter` methods that can be replaced with `Hash#except` method.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/HashFetchChain": {
      "title": "Style/HashFetchChain",
      "description": "Use `Hash#dig` instead of chained `fetch` calls.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/HashLikeCase": {
      "title": "Style/HashLikeCase",
      "description": "Checks for places where `case-when` represents a simple 1:1 mapping and can be replaced with a hash lookup.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "MinBranchesCount": {
              "type": "integer",
              "default": 3
            }
          }
        }
      ]
    },
    "Style/HashSlice": {
      "title": "Style/HashSlice",
      "description": "Checks for usages of `Hash#reject`, `Hash#select`, and `Hash#filter` methods that can be replaced with `Hash#slice` method.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/HashSyntax": {
      "title": "Style/HashSyntax",
      "description": "Prefer Ruby 1.9 hash syntax { a: 1, b: 2 } over 1.8 syntax { :a => 1, :b => 2 }.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "ruby19",
                    "hash_rockets",
                    "no_mixed_keys",
                    "ruby19_no_mixed_keys"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "ruby19",
                      "hash_rockets",
                      "no_mixed_keys",
                      "ruby19_no_mixed_keys"
                    ]
                  }
                }
              ],
              "default": "ruby19"
            },
            "EnforcedShorthandSyntax": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "always",
                    "never",
                    "either",
                    "consistent",
                    "either_consistent"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "always",
                      "never",
                      "either",
                      "consistent",
                      "either_consistent"
                    ]
                  }
                }
              ],
              "default": "either"
            },
            "UseHashRocketsWithSymbolValues": {
              "type": "boolean",
              "default": false
            },
            "PreferHashRocketsForNonAlnumEndingSymbols": {
              "type": "boolean",
              "default": false
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/HashTransformKeys": {
      "title": "Style/HashTransformKeys",
      "description": "Prefer `transform_keys` over `each_with_object`, `map`, or `to_h`.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/HashTransformValues": {
      "title": "Style/HashTransformValues",
      "description": "Prefer `transform_values` over `each_with_object`, `map`, or `to_h`.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/IdenticalConditionalBranches": {
      "title": "Style/IdenticalConditionalBranches",
      "description": "Checks that conditional statements do not have an identical line at the end of each branch, which can validly be moved out of the conditional.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/IfInsideElse": {
      "title": "Style/IfInsideElse",
      "description": "Finds if nodes inside else, which can be converted to elsif.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AllowIfModifier": {
              "type": "boolean",
              "default": false
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/IfUnlessModifier": {
      "title": "Style/IfUnlessModifier",
      "description": "Favor modifier if/unless usage when you have a single-line body.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/IfUnlessModifierOfIfUnless": {
      "title": "Style/IfUnlessModifierOfIfUnless",
      "description": "Avoid modifier if/unless usage on conditionals.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/IfWithBooleanLiteralBranches": {
      "title": "Style/IfWithBooleanLiteralBranches",
      "description": "Checks for redundant `if` with boolean literal branches.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AllowedMethods": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "nonzero?"
              ]
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/IfWithSemicolon": {
      "title": "Style/IfWithSemicolon",
      "description": "Do not use if x; .... Use the ternary operator instead.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/ImplicitRuntimeError": {
      "title": "Style/ImplicitRuntimeError",
      "description": "Use `raise` or `fail` with an explicit exception class and message, rather than just a message.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": false
            }
          }
        }
      ]
    },
    "Style/InPatternThen": {
      "title": "Style/InPatternThen",
      "description": "Checks for `in;` uses in `case` expressions.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/InfiniteLoop": {
      "title": "Style/InfiniteLoop",
      "description": "Use Kernel#loop for infinite loops. This cop is unsafe if the body may raise a `StopIteration` exception.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/InverseMethods": {
      "title": "Style/InverseMethods",
      "description": "Use the inverse method instead of `!.method` if an inverse method is defined.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "InverseMethods": {
              "type": "object",
              "default": {
                "any?": "none?",
                "even?": "odd?",
                "==": "!=",
                "=~": "!~",
                "<": ">=",
                ">": "<="
              }
            },
            "InverseBlocks": {
              "type": "object",
              "default": {
                "select": "reject",
                "select!": "reject!"
              }
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/InlineComment": {
      "title": "Style/InlineComment",
      "description": "Avoid trailing inline comments.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": false
            }
          }
        }
      ]
    },
    "Style/InvertibleUnlessCondition": {
      "title": "Style/InvertibleUnlessCondition",
      "description": "Favor `if` with inverted condition over `unless`.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": false
            },
            "InverseMethods": {
              "type": "object",
              "default": {
                "!=": "==",
                ">": "<=",
                "<=": ">",
                "<": ">=",
                ">=": "<",
                "!~": "=~",
                "zero?": "nonzero?",
                "nonzero?": "zero?",
                "any?": "none?",
                "none?": "any?",
                "even?": "odd?",
                "odd?": "even?"
              }
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/IpAddresses": {
      "title": "Style/IpAddresses",
      "description": "Don't include literal IP addresses in code.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": false
            },
            "AllowedAddresses": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "::"
              ]
            },
            "Exclude": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      ]
    },
    "Style/ItAssignment": {
      "title": "Style/ItAssignment",
      "description": "Checks for assignment to `it` inside a block.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            }
          }
        }
      ]
    },
    "Style/ItBlockParameter": {
      "title": "Style/ItBlockParameter",
      "description": "Checks for blocks with one argument where `it` block parameter can be used.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "allow_single_line",
                    "only_numbered_parameters",
                    "always",
                    "disallow"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "allow_single_line",
                      "only_numbered_parameters",
                      "always",
                      "disallow"
                    ]
                  }
                }
              ],
              "default": "allow_single_line"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/KeywordArgumentsMerging": {
      "title": "Style/KeywordArgumentsMerging",
      "description": "When passing an existing hash as keyword arguments, provide additional arguments directly rather than using `merge`.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/KeywordParametersOrder": {
      "title": "Style/KeywordParametersOrder",
      "description": "Enforces that optional keyword parameters are placed at the end of the parameters list.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/Lambda": {
      "title": "Style/Lambda",
      "description": "Use the new lambda literal syntax for single-line blocks.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "line_count_dependent",
                    "lambda",
                    "literal"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "line_count_dependent",
                      "lambda",
                      "literal"
                    ]
                  }
                }
              ],
              "default": "line_count_dependent"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/LambdaCall": {
      "title": "Style/LambdaCall",
      "description": "Use lambda.call(...) instead of lambda.(...).",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "call",
                    "braces"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "call",
                      "braces"
                    ]
                  }
                }
              ],
              "default": "call"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/LineEndConcatenation": {
      "title": "Style/LineEndConcatenation",
      "description": "Use \\ instead of + or << to concatenate two string literals at line end.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/MagicCommentFormat": {
      "title": "Style/MagicCommentFormat",
      "description": "Use a consistent style for magic comments.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "snake_case",
                    "kebab_case"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "snake_case",
                      "kebab_case"
                    ]
                  }
                }
              ],
              "default": "snake_case"
            },
            "DirectiveCapitalization": {
              "type": "string",
              "default": "lowercase"
            },
            "ValueCapitalization": {},
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/MapIntoArray": {
      "title": "Style/MapIntoArray",
      "description": "Checks for usages of `each` with `<<`, `push`, or `append` which can be replaced by `map`.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/MapToHash": {
      "title": "Style/MapToHash",
      "description": "Prefer `to_h` with a block over `map.to_h`.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/MapToSet": {
      "title": "Style/MapToSet",
      "description": "Prefer `to_set` with a block over `map.to_set`.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/MethodCallWithoutArgsParentheses": {
      "title": "Style/MethodCallWithoutArgsParentheses",
      "description": "Do not use parentheses for method calls with no arguments.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AllowedMethods": {
              "type": "array",
              "items": {},
              "default": []
            },
            "AllowedPatterns": {
              "type": "array",
              "default": []
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/MethodCallWithArgsParentheses": {
      "title": "Style/MethodCallWithArgsParentheses",
      "description": "Use parentheses for method calls with arguments.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": false
            },
            "IgnoreMacros": {
              "type": "boolean",
              "default": true
            },
            "AllowedMethods": {
              "type": "array",
              "items": {},
              "default": []
            },
            "AllowedPatterns": {
              "type": "array",
              "default": []
            },
            "IncludedMacros": {
              "type": "array",
              "items": {},
              "default": []
            },
            "AllowParenthesesInMultilineCall": {
              "type": "boolean",
              "default": false
            },
            "AllowParenthesesInChaining": {
              "type": "boolean",
              "default": false
            },
            "AllowParenthesesInCamelCaseMethod": {
              "type": "boolean",
              "default": false
            },
            "AllowParenthesesInStringInterpolation": {
              "type": "boolean",
              "default": false
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "require_parentheses",
                    "omit_parentheses"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "require_parentheses",
                      "omit_parentheses"
                    ]
                  }
                }
              ],
              "default": "require_parentheses"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/MinMaxComparison": {
      "title": "Style/MinMaxComparison",
      "description": "Enforces the use of `max` or `min` instead of comparison for greater or less.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/MultilineInPatternThen": {
      "title": "Style/MultilineInPatternThen",
      "description": "Do not use `then` for multi-line `in` statement.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/NumberedParameters": {
      "title": "Style/NumberedParameters",
      "description": "Restrict the usage of numbered parameters.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "allow_single_line",
                    "disallow"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "allow_single_line",
                      "disallow"
                    ]
                  }
                }
              ],
              "default": "allow_single_line"
            }
          }
        }
      ]
    },
    "Style/OpenStructUse": {
      "title": "Style/OpenStructUse",
      "description": "Avoid using OpenStruct. As of Ruby 3.0, use is officially discouraged due to performance, version compatibility, and potential security issues.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "References": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "https://docs.ruby-lang.org/en/3.0.0/OpenStruct.html#class-OpenStruct-label-Caveats"
              ]
            },
            "Enabled": {
              "default": "pending"
            }
          }
        }
      ]
    },
    "Style/OperatorMethodCall": {
      "title": "Style/OperatorMethodCall",
      "description": "Checks for redundant dot before operator method call.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/RedundantArrayConstructor": {
      "title": "Style/RedundantArrayConstructor",
      "description": "Checks for the instantiation of array using redundant `Array` constructor.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/RedundantArrayFlatten": {
      "title": "Style/RedundantArrayFlatten",
      "description": "Checks for redundant calls of `Array#flatten`.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/RedundantAssignment": {
      "title": "Style/RedundantAssignment",
      "description": "Checks for redundant assignment before returning.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/RedundantConstantBase": {
      "title": "Style/RedundantConstantBase",
      "description": "Avoid redundant `::` prefix on constant.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/RedundantCurrentDirectoryInPath": {
      "title": "Style/RedundantCurrentDirectoryInPath",
      "description": "Checks for a redundant current directory in a path given to `require_relative`.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/RedundantDoubleSplatHashBraces": {
      "title": "Style/RedundantDoubleSplatHashBraces",
      "description": "Checks for redundant uses of double splat hash braces.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/RedundantEach": {
      "title": "Style/RedundantEach",
      "description": "Checks for redundant `each`.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/RedundantFetchBlock": {
      "title": "Style/RedundantFetchBlock",
      "description": "Use `fetch(key, value)` instead of `fetch(key) { value }` when value has Numeric, Rational, Complex, Symbol or String type, `false`, `true`, `nil` or is a constant.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "References": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "https://github.com/fastruby/fast-ruby#hashfetch-with-argument-vs-hashfetch--block-code"
              ]
            },
            "Enabled": {
              "default": true
            },
            "SafeForConstants": {
              "type": "boolean",
              "default": false
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/RedundantFileExtensionInRequire": {
      "title": "Style/RedundantFileExtensionInRequire",
      "description": "Checks for the presence of superfluous `.rb` extension in the filename provided to `require` and `require_relative`.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/RedundantFilterChain": {
      "title": "Style/RedundantFilterChain",
      "description": "Identifies usages of `any?`, `empty?`, `none?` or `one?` predicate methods chained to `select`/`filter`/`find_all` and change them to use predicate method instead.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/RedundantFormat": {
      "title": "Style/RedundantFormat",
      "description": "Checks for usages of `Kernel#format` or `Kernel#sprintf` with only a single argument.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/RedundantHeredocDelimiterQuotes": {
      "title": "Style/RedundantHeredocDelimiterQuotes",
      "description": "Checks for redundant heredoc delimiter quotes.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/RedundantInitialize": {
      "title": "Style/RedundantInitialize",
      "description": "Checks for redundant `initialize` methods.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            },
            "AllowComments": {
              "type": "boolean",
              "default": true
            }
          }
        }
      ]
    },
    "Style/RedundantInterpolationUnfreeze": {
      "title": "Style/RedundantInterpolationUnfreeze",
      "description": "Checks for redundant unfreezing of interpolated strings.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/RedundantLineContinuation": {
      "title": "Style/RedundantLineContinuation",
      "description": "Check for redundant line continuation.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/RedundantRegexpArgument": {
      "title": "Style/RedundantRegexpArgument",
      "description": "Identifies places where argument can be replaced from a deterministic regexp to a string.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/RedundantRegexpConstructor": {
      "title": "Style/RedundantRegexpConstructor",
      "description": "Checks for the instantiation of regexp using redundant `Regexp.new` or `Regexp.compile`.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/RedundantSelfAssignment": {
      "title": "Style/RedundantSelfAssignment",
      "description": "Checks for places where redundant assignments are made for in place modification methods.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/RedundantSelfAssignmentBranch": {
      "title": "Style/RedundantSelfAssignmentBranch",
      "description": "Checks for places where conditional branch makes redundant self-assignment.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/RequireOrder": {
      "title": "Style/RequireOrder",
      "description": "Sort `require` and `require_relative` in alphabetical order.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": false
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/SafeNavigationChainLength": {
      "title": "Style/SafeNavigationChainLength",
      "description": "Enforces safe navigation chains length to not exceed the configured maximum.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "Max": {
              "type": "integer",
              "default": 2
            }
          }
        }
      ]
    },
    "Style/SingleLineDoEndBlock": {
      "title": "Style/SingleLineDoEndBlock",
      "description": "Checks for single-line `do`...`end` blocks.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/SoleNestedConditional": {
      "title": "Style/SoleNestedConditional",
      "description": "Finds sole nested conditional nodes which can be merged into outer conditional node.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AllowModifier": {
              "type": "boolean",
              "default": false
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/StaticClass": {
      "title": "Style/StaticClass",
      "description": "Prefer modules to classes with only class methods.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": false
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/MapCompactWithConditionalBlock": {
      "title": "Style/MapCompactWithConditionalBlock",
      "description": "Prefer `select` or `reject` over `map { ... }.compact`.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/MethodCalledOnDoEndBlock": {
      "title": "Style/MethodCalledOnDoEndBlock",
      "description": "Avoid chaining a method call on a do...end block.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": false
            }
          }
        }
      ]
    },
    "Style/MethodDefParentheses": {
      "title": "Style/MethodDefParentheses",
      "description": "Checks if the method definitions have or don't have parentheses.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "require_parentheses",
                    "require_no_parentheses",
                    "require_no_parentheses_except_multiline"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "require_parentheses",
                      "require_no_parentheses",
                      "require_no_parentheses_except_multiline"
                    ]
                  }
                }
              ],
              "default": "require_parentheses"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/MinMax": {
      "title": "Style/MinMax",
      "description": "Use `Enumerable#minmax` instead of `Enumerable#min` and `Enumerable#max` in conjunction.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/MissingElse": {
      "title": "Style/MissingElse",
      "description": "Require if/case expressions to have an else branches. If enabled, it is recommended that Style/UnlessElse and Style/EmptyElse be enabled. This will conflict with Style/EmptyElse if Style/EmptyElse is configured to style \"both\".",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": false
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "if",
                    "case",
                    "both"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "if",
                      "case",
                      "both"
                    ]
                  }
                }
              ],
              "default": "both"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/MissingRespondToMissing": {
      "title": "Style/MissingRespondToMissing",
      "description": "Checks if `method_missing` is implemented without implementing `respond_to_missing`.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            }
          }
        }
      ]
    },
    "Style/MixinGrouping": {
      "title": "Style/MixinGrouping",
      "description": "Checks for grouping of mixins in `class` and `module` bodies.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "separated",
                    "grouped"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "separated",
                      "grouped"
                    ]
                  }
                }
              ],
              "default": "separated"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/MixinUsage": {
      "title": "Style/MixinUsage",
      "description": "Checks that `include`, `extend` and `prepend` exists at the top level.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            }
          }
        }
      ]
    },
    "Style/ModuleFunction": {
      "title": "Style/ModuleFunction",
      "description": "Checks for usage of `extend self` in modules.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "module_function",
                    "extend_self",
                    "forbidden"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "module_function",
                      "extend_self",
                      "forbidden"
                    ]
                  }
                }
              ],
              "default": "module_function"
            },
            "Autocorrect": {
              "type": "boolean",
              "default": false
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/MultilineBlockChain": {
      "title": "Style/MultilineBlockChain",
      "description": "Avoid multi-line chains of blocks.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            }
          }
        }
      ]
    },
    "Style/MultilineIfThen": {
      "title": "Style/MultilineIfThen",
      "description": "Do not use then for multi-line if/unless.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/MultilineIfModifier": {
      "title": "Style/MultilineIfModifier",
      "description": "Only use if/unless modifiers on single line statements.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/MultilineMethodSignature": {
      "title": "Style/MultilineMethodSignature",
      "description": "Avoid multi-line method signatures.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": false
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/MultilineMemoization": {
      "title": "Style/MultilineMemoization",
      "description": "Wrap multiline memoizations in a `begin` and `end` block.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "keyword",
                    "braces"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "keyword",
                      "braces"
                    ]
                  }
                }
              ],
              "default": "keyword"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/MultilineTernaryOperator": {
      "title": "Style/MultilineTernaryOperator",
      "description": "Avoid multi-line ?: (the ternary operator); use if/unless instead.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/MultilineWhenThen": {
      "title": "Style/MultilineWhenThen",
      "description": "Do not use then for multi-line when statement.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/MultipleComparison": {
      "title": "Style/MultipleComparison",
      "description": "Avoid comparing a variable with multiple items in a conditional, use Array#include? instead.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AllowMethodComparison": {
              "type": "boolean",
              "default": true
            },
            "ComparisonsThreshold": {
              "type": "integer",
              "default": 2
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/MutableConstant": {
      "title": "Style/MutableConstant",
      "description": "Do not assign mutable objects to constants.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "literals",
                    "strict"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "literals",
                      "strict"
                    ]
                  }
                }
              ],
              "default": "literals"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/NegatedIf": {
      "title": "Style/NegatedIf",
      "description": "Favor unless over if for negative conditions (or control flow or).",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "both",
                    "prefix",
                    "postfix"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "both",
                      "prefix",
                      "postfix"
                    ]
                  }
                }
              ],
              "default": "both"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/NegatedIfElseCondition": {
      "title": "Style/NegatedIfElseCondition",
      "description": "Checks for uses of `if-else` and ternary operators with a negated condition which can be simplified by inverting condition and swapping branches.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/NegatedUnless": {
      "title": "Style/NegatedUnless",
      "description": "Favor if over unless for negative conditions.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "both",
                    "prefix",
                    "postfix"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "both",
                      "prefix",
                      "postfix"
                    ]
                  }
                }
              ],
              "default": "both"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/NegatedWhile": {
      "title": "Style/NegatedWhile",
      "description": "Favor until over while for negative conditions.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/NestedFileDirname": {
      "title": "Style/NestedFileDirname",
      "description": "Checks for nested `File.dirname`.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/NestedModifier": {
      "title": "Style/NestedModifier",
      "description": "Avoid using nested modifiers.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/NestedParenthesizedCalls": {
      "title": "Style/NestedParenthesizedCalls",
      "description": "Parenthesize method calls which are nested inside the argument list of another parenthesized method call.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AllowedMethods": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "be",
                "be_a",
                "be_an",
                "be_between",
                "be_falsey",
                "be_kind_of",
                "be_instance_of",
                "be_truthy",
                "be_within",
                "eq",
                "eql",
                "end_with",
                "include",
                "match",
                "raise_error",
                "respond_to",
                "start_with"
              ]
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/NestedTernaryOperator": {
      "title": "Style/NestedTernaryOperator",
      "description": "Use one expression per branch in a ternary operator.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/Next": {
      "title": "Style/Next",
      "description": "Use `next` to skip iteration instead of a condition at the end.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "skip_modifier_ifs",
                    "always"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "skip_modifier_ifs",
                      "always"
                    ]
                  }
                }
              ],
              "default": "skip_modifier_ifs"
            },
            "MinBodyLength": {
              "type": "integer",
              "default": 3
            },
            "AllowConsecutiveConditionals": {
              "type": "boolean",
              "default": false
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/NilComparison": {
      "title": "Style/NilComparison",
      "description": "Prefer x.nil? to x == nil.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "predicate",
                    "comparison"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "predicate",
                      "comparison"
                    ]
                  }
                }
              ],
              "default": "predicate"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/NilLambda": {
      "title": "Style/NilLambda",
      "description": "Prefer `-> {}` to `-> { nil }`.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/NonNilCheck": {
      "title": "Style/NonNilCheck",
      "description": "Checks for redundant nil checks.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "IncludeSemanticChanges": {
              "type": "boolean",
              "default": false
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/Not": {
      "title": "Style/Not",
      "description": "Use ! instead of not.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/NumberedParametersLimit": {
      "title": "Style/NumberedParametersLimit",
      "description": "Avoid excessive numbered params in a single block.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "Max": {
              "type": "integer",
              "default": 1
            }
          }
        }
      ]
    },
    "Style/NumericLiterals": {
      "title": "Style/NumericLiterals",
      "description": "Add underscores to large numeric literals to improve their readability.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "MinDigits": {
              "type": "integer",
              "default": 5
            },
            "Strict": {
              "type": "boolean",
              "default": false
            },
            "AllowedNumbers": {
              "type": "array",
              "items": {},
              "default": []
            },
            "AllowedPatterns": {
              "type": "array",
              "default": []
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/NumericLiteralPrefix": {
      "title": "Style/NumericLiteralPrefix",
      "description": "Use smallcase prefixes for numeric literals.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedOctalStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "zero_with_o",
                    "zero_only"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "zero_with_o",
                      "zero_only"
                    ]
                  }
                }
              ],
              "default": "zero_with_o"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/NumericPredicate": {
      "title": "Style/NumericPredicate",
      "description": "Checks for the use of predicate- or comparison methods for numeric comparisons.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "predicate",
                    "comparison"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "predicate",
                      "comparison"
                    ]
                  }
                }
              ],
              "default": "predicate"
            },
            "AllowedMethods": {
              "type": "array",
              "items": {},
              "default": []
            },
            "AllowedPatterns": {
              "type": "array",
              "default": []
            },
            "Exclude": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/ObjectThen": {
      "title": "Style/ObjectThen",
      "description": "Enforces the use of consistent method names `Object#yield_self` or `Object#then`.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "then",
                    "yield_self"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "then",
                      "yield_self"
                    ]
                  }
                }
              ],
              "default": "then"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/OneLineConditional": {
      "title": "Style/OneLineConditional",
      "description": "Favor the ternary operator (?:) or multi-line constructs over single-line if/then/else/end constructs.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AlwaysCorrectToMultiline": {
              "type": "boolean",
              "default": false
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/OrAssignment": {
      "title": "Style/OrAssignment",
      "description": "Recommend usage of double pipe equals (||=) where applicable.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/OptionHash": {
      "title": "Style/OptionHash",
      "description": "Don't use option hashes when you can use keyword arguments.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": false
            },
            "SuspiciousParamNames": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "options",
                "opts",
                "args",
                "params",
                "parameters"
              ]
            },
            "Allowlist": {
              "type": "array",
              "items": {},
              "default": []
            }
          }
        }
      ]
    },
    "Style/OptionalArguments": {
      "title": "Style/OptionalArguments",
      "description": "Checks for optional arguments that do not appear at the end of the argument list.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            }
          }
        }
      ]
    },
    "Style/OptionalBooleanParameter": {
      "title": "Style/OptionalBooleanParameter",
      "description": "Use keyword arguments when defining method with boolean argument.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AllowedMethods": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "respond_to_missing?"
              ]
            }
          }
        }
      ]
    },
    "Style/ParallelAssignment": {
      "title": "Style/ParallelAssignment",
      "description": "Check for simple usages of parallel assignment. It will only warn when the number of variables matches on both sides of the assignment.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/ParenthesesAroundCondition": {
      "title": "Style/ParenthesesAroundCondition",
      "description": "Don't use parentheses around the condition of an if/unless/while.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AllowSafeAssignment": {
              "type": "boolean",
              "default": true
            },
            "AllowInMultilineConditions": {
              "type": "boolean",
              "default": false
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/PercentLiteralDelimiters": {
      "title": "Style/PercentLiteralDelimiters",
      "description": "Use `%`-literal delimiters consistently.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "PreferredDelimiters": {
              "type": "object",
              "default": {
                "default": "()",
                "%i": "[]",
                "%I": "[]",
                "%r": "{}",
                "%w": "[]",
                "%W": "[]"
              }
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/PercentQLiterals": {
      "title": "Style/PercentQLiterals",
      "description": "Checks if uses of %Q/%q match the configured preference.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "lower_case_q",
                    "upper_case_q"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "lower_case_q",
                      "upper_case_q"
                    ]
                  }
                }
              ],
              "default": "lower_case_q"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/PerlBackrefs": {
      "title": "Style/PerlBackrefs",
      "description": "Avoid Perl-style regex back references.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/PreferredHashMethods": {
      "title": "Style/PreferredHashMethods",
      "description": "Checks use of `has_key?` and `has_value?` Hash methods.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "short",
                    "verbose"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "short",
                      "verbose"
                    ]
                  }
                }
              ],
              "default": "short"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/Proc": {
      "title": "Style/Proc",
      "description": "Use proc instead of Proc.new.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/QuotedSymbols": {
      "title": "Style/QuotedSymbols",
      "description": "Use a consistent style for quoted symbols.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "same_as_string_literals",
                    "single_quotes",
                    "double_quotes"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "same_as_string_literals",
                      "single_quotes",
                      "double_quotes"
                    ]
                  }
                }
              ],
              "default": "same_as_string_literals"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/RaiseArgs": {
      "title": "Style/RaiseArgs",
      "description": "Checks the arguments passed to raise/fail.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "compact",
                    "exploded"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "compact",
                      "exploded"
                    ]
                  }
                }
              ],
              "default": "exploded"
            },
            "AllowedCompactTypes": {
              "type": "array",
              "items": {},
              "default": []
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/RandomWithOffset": {
      "title": "Style/RandomWithOffset",
      "description": "Prefer to use ranges when generating random numbers instead of integers with offsets.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/RedundantArgument": {
      "title": "Style/RedundantArgument",
      "description": "Check for a redundant argument passed to certain methods.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "Methods": {
              "type": "object",
              "default": {
                "join": "",
                "sum": 0,
                "exit": true,
                "exit!": false,
                "split": " ",
                "chomp": "\n",
                "chomp!": "\n"
              }
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/RedundantBegin": {
      "title": "Style/RedundantBegin",
      "description": "Don't use begin blocks when they are not needed.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/RedundantCapitalW": {
      "title": "Style/RedundantCapitalW",
      "description": "Checks for %W when interpolation is not needed.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/RedundantCondition": {
      "title": "Style/RedundantCondition",
      "description": "Checks for unnecessary conditional expressions.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AllowedMethods": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "nonzero?"
              ]
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/RedundantConditional": {
      "title": "Style/RedundantConditional",
      "description": "Don't return true/false from a conditional.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/RedundantException": {
      "title": "Style/RedundantException",
      "description": "Checks for an obsolete RuntimeException argument in raise/fail.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/RedundantFreeze": {
      "title": "Style/RedundantFreeze",
      "description": "Checks usages of Object#freeze on immutable objects.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/RedundantInterpolation": {
      "title": "Style/RedundantInterpolation",
      "description": "Checks for strings that are just an interpolated expression.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/RedundantParentheses": {
      "title": "Style/RedundantParentheses",
      "description": "Checks for parentheses that seem not to serve any purpose.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/RedundantPercentQ": {
      "title": "Style/RedundantPercentQ",
      "description": "Checks for %q/%Q when single quotes or double quotes would do.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/RedundantRegexpCharacterClass": {
      "title": "Style/RedundantRegexpCharacterClass",
      "description": "Checks for unnecessary single-element Regexp character classes.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/RedundantRegexpEscape": {
      "title": "Style/RedundantRegexpEscape",
      "description": "Checks for redundant escapes in Regexps.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/RedundantReturn": {
      "title": "Style/RedundantReturn",
      "description": "Don't use return where it's not required.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AllowMultipleReturnValues": {
              "type": "boolean",
              "default": false
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/RedundantSelf": {
      "title": "Style/RedundantSelf",
      "description": "Don't use self where it's not needed.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/RedundantSort": {
      "title": "Style/RedundantSort",
      "description": "Use `min` instead of `sort.first`, `max_by` instead of `sort_by...last`, etc.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/RedundantSortBy": {
      "title": "Style/RedundantSortBy",
      "description": "Use `sort` instead of `sort_by { |x| x }`.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/RedundantStringEscape": {
      "title": "Style/RedundantStringEscape",
      "description": "Checks for redundant escapes in string literals.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/RegexpLiteral": {
      "title": "Style/RegexpLiteral",
      "description": "Use / or %r around regular expressions.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "slashes",
                    "percent_r",
                    "mixed"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "slashes",
                      "percent_r",
                      "mixed"
                    ]
                  }
                }
              ],
              "default": "slashes"
            },
            "AllowInnerSlashes": {
              "type": "boolean",
              "default": false
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/RescueModifier": {
      "title": "Style/RescueModifier",
      "description": "Avoid using rescue in its modifier form.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/RescueStandardError": {
      "title": "Style/RescueStandardError",
      "description": "Avoid rescuing without specifying an error class.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "implicit",
                    "explicit"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "implicit",
                      "explicit"
                    ]
                  }
                }
              ],
              "default": "explicit"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/ReturnNil": {
      "title": "Style/ReturnNil",
      "description": "Use return instead of return nil.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": false
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "return",
                    "return_nil"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "return",
                      "return_nil"
                    ]
                  }
                }
              ],
              "default": "return"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/ReturnNilInPredicateMethodDefinition": {
      "title": "Style/ReturnNilInPredicateMethodDefinition",
      "description": "Checks if uses of `return` or `return nil` in predicate method definition.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AllowedMethods": {
              "type": "array",
              "items": {},
              "default": []
            },
            "AllowedPatterns": {
              "type": "array",
              "default": []
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/SafeNavigation": {
      "title": "Style/SafeNavigation",
      "description": "Transforms usages of a method call safeguarded by a check for the existence of the object to safe navigation (`&.`). Autocorrection is unsafe as it assumes the object will be `nil` or truthy, but never `false`.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "ConvertCodeThatCanStartToReturnNil": {
              "type": "boolean",
              "default": false
            },
            "AllowedMethods": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "present?",
                "blank?",
                "presence",
                "try",
                "try!"
              ]
            },
            "MaxChainLength": {
              "type": "integer",
              "default": 2
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/Sample": {
      "title": "Style/Sample",
      "description": "Use `sample` instead of `shuffle.first`, `shuffle.last`, and `shuffle[Integer]`.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "References": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "https://github.com/fastruby/fast-ruby#arrayshufflefirst-vs-arraysample-code"
              ]
            },
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/SelectByRegexp": {
      "title": "Style/SelectByRegexp",
      "description": "Prefer grep/grep_v to select/reject with a regexp match.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/SelfAssignment": {
      "title": "Style/SelfAssignment",
      "description": "Checks for places where self-assignment shorthand should have been used.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/Semicolon": {
      "title": "Style/Semicolon",
      "description": "Don't use semicolons to terminate expressions.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AllowAsExpressionSeparator": {
              "type": "boolean",
              "default": false
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/Send": {
      "title": "Style/Send",
      "description": "Prefer `Object#__send__` or `Object#public_send` to `send`, as `send` may overlap with existing methods.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": false
            }
          }
        }
      ]
    },
    "Style/SendWithLiteralMethodName": {
      "title": "Style/SendWithLiteralMethodName",
      "description": "Detects the use of the `public_send` method with a static method name argument.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AllowSend": {
              "type": "boolean",
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/SignalException": {
      "title": "Style/SignalException",
      "description": "Checks for proper usage of fail and raise.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "only_raise",
                    "only_fail",
                    "semantic"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "only_raise",
                      "only_fail",
                      "semantic"
                    ]
                  }
                }
              ],
              "default": "only_raise"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/SingleArgumentDig": {
      "title": "Style/SingleArgumentDig",
      "description": "Avoid using single argument dig method.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/SingleLineBlockParams": {
      "title": "Style/SingleLineBlockParams",
      "description": "Enforces the names of some block params.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": false
            },
            "Methods": {
              "type": "array",
              "items": {
                "type": "object"
              },
              "default": [
                {
                  "reduce": [
                    "acc",
                    "elem"
                  ]
                },
                {
                  "inject": [
                    "acc",
                    "elem"
                  ]
                }
              ]
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/SingleLineMethods": {
      "title": "Style/SingleLineMethods",
      "description": "Avoid single-line methods.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AllowIfMethodIsEmpty": {
              "type": "boolean",
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/SlicingWithRange": {
      "title": "Style/SlicingWithRange",
      "description": "Checks array slicing is done with redundant, endless, and beginless ranges when suitable.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/SpecialGlobalVars": {
      "title": "Style/SpecialGlobalVars",
      "description": "Avoid Perl-style global variables.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "RequireEnglish": {
              "type": "boolean",
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "use_perl_names",
                    "use_english_names",
                    "use_builtin_english_names"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "use_perl_names",
                      "use_english_names",
                      "use_builtin_english_names"
                    ]
                  }
                }
              ],
              "default": "use_english_names"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/StabbyLambdaParentheses": {
      "title": "Style/StabbyLambdaParentheses",
      "description": "Check for the usage of parentheses around stabby lambda arguments.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "require_parentheses",
                    "require_no_parentheses"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "require_parentheses",
                      "require_no_parentheses"
                    ]
                  }
                }
              ],
              "default": "require_parentheses"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/StderrPuts": {
      "title": "Style/StderrPuts",
      "description": "Use `warn` instead of `$stderr.puts`.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/StringChars": {
      "title": "Style/StringChars",
      "description": "Checks for uses of `String#split` with empty string or regexp literal argument.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/StringConcatenation": {
      "title": "Style/StringConcatenation",
      "description": "Checks for places where string concatenation can be replaced with string interpolation.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "Mode": {
              "type": "string",
              "default": "aggressive"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/StringHashKeys": {
      "title": "Style/StringHashKeys",
      "description": "Prefer symbols instead of strings as hash keys.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": false
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/StringLiterals": {
      "title": "Style/StringLiterals",
      "description": "Checks if uses of quotes match the configured preference.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "single_quotes",
                    "double_quotes"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "single_quotes",
                      "double_quotes"
                    ]
                  }
                }
              ],
              "default": "single_quotes"
            },
            "ConsistentQuotesInMultiline": {
              "type": "boolean",
              "default": false
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/StringLiteralsInInterpolation": {
      "title": "Style/StringLiteralsInInterpolation",
      "description": "Checks if uses of quotes inside expressions in interpolated strings match the configured preference.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "single_quotes",
                    "double_quotes"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "single_quotes",
                      "double_quotes"
                    ]
                  }
                }
              ],
              "default": "single_quotes"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/StringMethods": {
      "title": "Style/StringMethods",
      "description": "Checks if configured preferred methods are used over non-preferred.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": false
            },
            "PreferredMethods": {
              "type": "object",
              "default": {
                "intern": "to_sym"
              }
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/Strip": {
      "title": "Style/Strip",
      "description": "Use `strip` instead of `lstrip.rstrip`.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/StructInheritance": {
      "title": "Style/StructInheritance",
      "description": "Checks for inheritance from Struct.new.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/SuperArguments": {
      "title": "Style/SuperArguments",
      "description": "Call `super` without arguments and parentheses when the signature is identical.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/SuperWithArgsParentheses": {
      "title": "Style/SuperWithArgsParentheses",
      "description": "Use parentheses for `super` with arguments.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/SwapValues": {
      "title": "Style/SwapValues",
      "description": "Enforces the use of shorthand-style swapping of 2 variables.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/SymbolArray": {
      "title": "Style/SymbolArray",
      "description": "Use %i or %I for arrays of symbols.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "percent",
                    "brackets"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "percent",
                      "brackets"
                    ]
                  }
                }
              ],
              "default": "percent"
            },
            "MinSize": {
              "type": "integer",
              "default": 2
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/SymbolLiteral": {
      "title": "Style/SymbolLiteral",
      "description": "Use plain symbols instead of string symbols when possible.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/SymbolProc": {
      "title": "Style/SymbolProc",
      "description": "Use symbols as procs instead of blocks when possible.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AllowMethodsWithArguments": {
              "type": "boolean",
              "default": false
            },
            "AllowedMethods": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "define_method"
              ]
            },
            "AllowedPatterns": {
              "type": "array",
              "default": []
            },
            "AllowComments": {
              "type": "boolean",
              "default": false
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/TernaryParentheses": {
      "title": "Style/TernaryParentheses",
      "description": "Checks for use of parentheses around ternary conditions.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "require_parentheses",
                    "require_no_parentheses",
                    "require_parentheses_when_complex"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "require_parentheses",
                      "require_no_parentheses",
                      "require_parentheses_when_complex"
                    ]
                  }
                }
              ],
              "default": "require_no_parentheses"
            },
            "AllowSafeAssignment": {
              "type": "boolean",
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/TopLevelMethodDefinition": {
      "title": "Style/TopLevelMethodDefinition",
      "description": "Looks for top-level method definitions.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": false
            }
          }
        }
      ]
    },
    "Style/TrailingBodyOnClass": {
      "title": "Style/TrailingBodyOnClass",
      "description": "Class body goes below class statement.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/TrailingBodyOnMethodDefinition": {
      "title": "Style/TrailingBodyOnMethodDefinition",
      "description": "Method body goes below definition.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/TrailingBodyOnModule": {
      "title": "Style/TrailingBodyOnModule",
      "description": "Module body goes below module statement.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/TrailingCommaInArguments": {
      "title": "Style/TrailingCommaInArguments",
      "description": "Checks for trailing comma in argument lists.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyleForMultiline": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "comma",
                    "consistent_comma",
                    "no_comma"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "comma",
                      "consistent_comma",
                      "no_comma"
                    ]
                  }
                }
              ],
              "default": "no_comma"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/TrailingCommaInArrayLiteral": {
      "title": "Style/TrailingCommaInArrayLiteral",
      "description": "Checks for trailing comma in array literals.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyleForMultiline": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "comma",
                    "consistent_comma",
                    "diff_comma",
                    "no_comma"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "comma",
                      "consistent_comma",
                      "diff_comma",
                      "no_comma"
                    ]
                  }
                }
              ],
              "default": "no_comma"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/TrailingCommaInBlockArgs": {
      "title": "Style/TrailingCommaInBlockArgs",
      "description": "Checks for useless trailing commas in block arguments.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": false
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/TrailingCommaInHashLiteral": {
      "title": "Style/TrailingCommaInHashLiteral",
      "description": "Checks for trailing comma in hash literals.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyleForMultiline": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "comma",
                    "consistent_comma",
                    "diff_comma",
                    "no_comma"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "comma",
                      "consistent_comma",
                      "diff_comma",
                      "no_comma"
                    ]
                  }
                }
              ],
              "default": "no_comma"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/TrailingMethodEndStatement": {
      "title": "Style/TrailingMethodEndStatement",
      "description": "Checks for trailing end statement on line of method body.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/TrailingUnderscoreVariable": {
      "title": "Style/TrailingUnderscoreVariable",
      "description": "Checks for the usage of unneeded trailing underscores at the end of parallel variable assignment.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "AllowNamedUnderscoreVariables": {
              "type": "boolean",
              "default": true
            },
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/TrivialAccessors": {
      "title": "Style/TrivialAccessors",
      "description": "Prefer attr_* methods to trivial readers/writers.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "ExactNameMatch": {
              "type": "boolean",
              "default": true
            },
            "AllowPredicates": {
              "type": "boolean",
              "default": true
            },
            "AllowDSLWriters": {
              "type": "boolean",
              "default": true
            },
            "IgnoreClassMethods": {
              "type": "boolean",
              "default": false
            },
            "AllowedMethods": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "to_ary",
                "to_a",
                "to_c",
                "to_enum",
                "to_h",
                "to_hash",
                "to_i",
                "to_int",
                "to_io",
                "to_open",
                "to_path",
                "to_proc",
                "to_r",
                "to_regexp",
                "to_str",
                "to_s",
                "to_sym"
              ]
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/UnlessElse": {
      "title": "Style/UnlessElse",
      "description": "Do not use unless with else. Rewrite these with the positive case first.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/UnlessLogicalOperators": {
      "title": "Style/UnlessLogicalOperators",
      "description": "Checks for use of logical operators in an unless condition.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": false
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "forbid_mixed_logical_operators",
                    "forbid_logical_operators"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "forbid_mixed_logical_operators",
                      "forbid_logical_operators"
                    ]
                  }
                }
              ],
              "default": "forbid_mixed_logical_operators"
            }
          }
        }
      ]
    },
    "Style/UnpackFirst": {
      "title": "Style/UnpackFirst",
      "description": "Checks for accessing the first element of `String#unpack` instead of using `unpack1`.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/VariableInterpolation": {
      "title": "Style/VariableInterpolation",
      "description": "Don't interpolate global, instance and class variables directly in strings.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/WhenThen": {
      "title": "Style/WhenThen",
      "description": "Use when x then ... for one-line cases.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/WhileUntilDo": {
      "title": "Style/WhileUntilDo",
      "description": "Checks for redundant do after while or until.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/WhileUntilModifier": {
      "title": "Style/WhileUntilModifier",
      "description": "Favor modifier while/until usage when you have a single-line body.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/WordArray": {
      "title": "Style/WordArray",
      "description": "Use %w or %W for arrays of words.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "percent",
                    "brackets"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "percent",
                      "brackets"
                    ]
                  }
                }
              ],
              "default": "percent"
            },
            "MinSize": {
              "type": "integer",
              "default": 2
            },
            "WordRegex": {
              "default": "(?-mix:\\A(?:\\p{Word}|\\p{Word}-\\p{Word}|\\n|\\t)+\\z)"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/YAMLFileRead": {
      "title": "Style/YAMLFileRead",
      "description": "Checks for the use of `YAML.load`, `YAML.safe_load`, and `YAML.parse` with `File.read` argument.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/YodaCondition": {
      "title": "Style/YodaCondition",
      "description": "Forbid or enforce yoda conditions.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "References": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "https://en.wikipedia.org/wiki/Yoda_conditions"
              ]
            },
            "Enabled": {
              "default": true
            },
            "EnforcedStyle": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": [
                    "forbid_for_all_comparison_operators",
                    "forbid_for_equality_operators_only",
                    "require_for_all_comparison_operators",
                    "require_for_equality_operators_only"
                  ]
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "forbid_for_all_comparison_operators",
                      "forbid_for_equality_operators_only",
                      "require_for_all_comparison_operators",
                      "require_for_equality_operators_only"
                    ]
                  }
                }
              ],
              "default": "forbid_for_all_comparison_operators"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/YodaExpression": {
      "title": "Style/YodaExpression",
      "description": "Forbid the use of yoda expressions.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": false
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Style/ZeroLengthPredicate": {
      "title": "Style/ZeroLengthPredicate",
      "description": "Use #empty? when testing for objects of length 0.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Security/CompoundHash": {
      "title": "Security/CompoundHash",
      "description": "When overwriting Object#hash to combine values, prefer delegating to Array#hash over writing a custom implementation.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            }
          }
        }
      ]
    },
    "Security/Eval": {
      "title": "Security/Eval",
      "description": "The use of eval represents a serious security risk.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            }
          }
        }
      ]
    },
    "Security/IoMethods": {
      "title": "Security/IoMethods",
      "description": "Checks for the first argument to `IO.read`, `IO.binread`, `IO.write`, `IO.binwrite`, `IO.foreach`, and `IO.readlines`.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": "pending"
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Security/JSONLoad": {
      "title": "Security/JSONLoad",
      "description": "Prefer usage of `JSON.parse` over `JSON.load` due to potential security issues. See reference for more information.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "References": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "https://ruby-doc.org/stdlib-2.7.0/libdoc/json/rdoc/JSON.html#method-i-load"
              ]
            },
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Security/MarshalLoad": {
      "title": "Security/MarshalLoad",
      "description": "Avoid using of `Marshal.load` or `Marshal.restore` due to potential security issues. See reference for more information.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "References": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "https://ruby-doc.org/core-2.7.0/Marshal.html#module-Marshal-label-Security+considerations"
              ]
            },
            "Enabled": {
              "default": true
            }
          }
        }
      ]
    },
    "Security/Open": {
      "title": "Security/Open",
      "description": "The use of `Kernel#open` and `URI.open` represent a serious security risk.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            }
          }
        }
      ]
    },
    "Security/YAMLLoad": {
      "title": "Security/YAMLLoad",
      "description": "Prefer usage of `YAML.safe_load` over `YAML.load` due to potential security issues. See reference for more information.",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "References": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "https://ruby-doc.org/stdlib-2.7.0/libdoc/yaml/rdoc/YAML.html#module-YAML-label-Security"
              ]
            },
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Buildkite/AvoidRequestQueryParameters": {
      "title": "Buildkite/AvoidRequestQueryParameters",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            }
          }
        }
      ]
    },
    "Buildkite/CacheFetchKwarg": {
      "title": "Buildkite/CacheFetchKwarg",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Buildkite/ConsumerIvarMemoize": {
      "title": "Buildkite/ConsumerIvarMemoize",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            }
          }
        }
      ]
    },
    "Buildkite/KarafkaConsumerReservedIvars": {
      "title": "Buildkite/KarafkaConsumerReservedIvars",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            }
          }
        }
      ]
    },
    "Buildkite/RegexpMatchingStringEnding": {
      "title": "Buildkite/RegexpMatchingStringEnding",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            }
          }
        }
      ]
    },
    "Buildkite/RegexpUnescapedDomainDots": {
      "title": "Buildkite/RegexpUnescapedDomainDots",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            }
          }
        }
      ]
    },
    "Buildkite/RailsCacheExpireIn": {
      "title": "Buildkite/RailsCacheExpireIn",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            }
          }
        }
      ]
    },
    "Buildkite/SidekiqDontUseKeywordArguments": {
      "title": "Buildkite/SidekiqDontUseKeywordArguments",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            }
          }
        }
      ]
    },
    "Buildkite/SidekiqParamSymbolKeys": {
      "title": "Buildkite/SidekiqParamSymbolKeys",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            }
          }
        }
      ]
    },
    "Buildkite/SpecifyWithoutDescription": {
      "title": "Buildkite/SpecifyWithoutDescription",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            }
          }
        }
      ]
    },
    "Buildkite/UseApplicationWorker": {
      "title": "Buildkite/UseApplicationWorker",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Buildkite/UsePipelinesApplicationWorker": {
      "title": "Buildkite/UsePipelinesApplicationWorker",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            }
          }
        }
      ]
    },
    "Buildkite/UseOrganizationContext": {
      "title": "Buildkite/UseOrganizationContext",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Buildkite/UseSidekiqQueueConstant": {
      "title": "Buildkite/UseSidekiqQueueConstant",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Buildkite/AvoidRackRequestStatusPredicateMatchers": {
      "title": "Buildkite/AvoidRackRequestStatusPredicateMatchers",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    },
    "Buildkite/PreferParamsExpect": {
      "title": "Buildkite/PreferParamsExpect",
      "allOf": [
        {
          "$ref": "#/definitions/copProperties"
        },
        {
          "properties": {
            "Enabled": {
              "default": true
            },
            "AutoCorrect": {
              "type": "boolean"
            }
          }
        }
      ]
    }
  },
  "definitions": {
    "stringArray": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "nullableArray": {
      "oneOf": [
        {
          "type": "array"
        },
        {
          "type": "null"
        }
      ]
    },
    "stringOrStrings": {
      "oneOf": [
        {
          "type": "string"
        },
        {
          "$ref": "#/definitions/stringArray"
        }
      ]
    },
    "severity": {
      "type": "string",
      "enum": [
        "info",
        "refactor",
        "convention",
        "warning",
        "error",
        "fatal"
      ]
    },
    "inheritMode": {
      "type": "object",
      "minProperties": 1,
      "propertyNames": {
        "enum": [
          "merge",
          "override"
        ]
      },
      "additionalProperties": {
        "type": "array",
        "minItems": 1,
        "items": {
          "type": "string"
        }
      }
    },
    "sharedProperties": {
      "properties": {
        "Include": {
          "$ref": "#/definitions/nullableArray"
        },
        "Exclude": {
          "$ref": "#/definitions/nullableArray"
        },
        "StyleGuideBaseURL": {
          "type": "string",
          "default": "https://rubystyle.guide"
        },
        "inherit_mode": {
          "$ref": "#/definitions/inheritMode"
        }
      }
    },
    "copProperties": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/sharedProperties"
        },
        {
          "properties": {
            "Enabled": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string",
                  "enum": [
                    "pending"
                  ]
                }
              ]
            },
            "Severity": {
              "$ref": "#/definitions/severity"
            },
            "Details": {
              "type": "string"
            },
            "StyleGuide": {
              "type": "string"
            }
          }
        }
      ]
    },
    "allCopsProperties": {
      "properties": {
        "DefaultFormatter": {
          "type": "string",
          "default": "progress"
        },
        "DisplayCopNames": {
          "type": "boolean",
          "default": true
        },
        "DisplayStyleGuide": {
          "type": "boolean",
          "default": false
        },
        "DocumentationBaseURL": {
          "type": "string",
          "default": "https://docs.rubocop.org/rubocop"
        },
        "ExtraDetails": {
          "type": "boolean",
          "default": false
        },
        "StyleGuideCopsOnly": {
          "type": "boolean",
          "default": false
        },
        "EnabledByDefault": {
          "type": "boolean",
          "default": false
        },
        "DisabledByDefault": {
          "type": "boolean",
          "default": false
        },
        "NewCops": {
          "type": "string",
          "default": "pending",
          "enum": [
            "pending",
            "enable",
            "disable"
          ]
        },
        "UseCache": {
          "type": "boolean",
          "default": true
        },
        "MaxFilesInCache": {
          "type": "integer",
          "default": 20000
        },
        "CacheRootDirectory": {
          "type": "string"
        },
        "AllowSymlinksInCacheRootDirectory": {
          "type": "boolean",
          "default": false
        },
        "TargetRubyVersion": {
          "oneOf": [
            {
              "type": "number"
            },
            {
              "type": "string"
            }
          ]
        },
        "SuggestExtensions": {
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "object",
              "additionalProperties": {
                "oneOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "$ref": "#/definitions/stringArray"
                  }
                ]
              }
            }
          ]
        },
        "RubyInterpreters": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    }
  }
}
